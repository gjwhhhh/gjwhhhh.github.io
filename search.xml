<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>交换瓶子(图论、环、置换群、贪心)</title>
      <link href="/2021/11/18/jiao-huan-ping-zi-tu-lun-huan-zhi-huan-qun-tan-xin/"/>
      <url>/2021/11/18/jiao-huan-ping-zi-tu-lun-huan-zhi-huan-qun-tan-xin/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.acwing.com/problem/content/1226/">交换瓶子</a></p><p>有 N 个瓶子，编号 1∼N，放在架子上。</p><p>比如有 5 个瓶子：</p><pre><code>2 1 3 5 4</code></pre><p>要求每次拿起 2 个瓶子，交换它们的位置。</p><p>经过若干次后，使得瓶子的序号为：</p><pre><code>1 2 3 4 5</code></pre><p>对于这么简单的情况，显然，至少需要交换 22 次就可以复位。</p><p>如果瓶子更多呢？你可以通过编程来解决。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含一个整数 N，表示瓶子数量。</p><p>第二行包含 N 个整数，表示瓶子目前的排列状况。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个正整数，表示至少交换多少次，才能完成排序。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤N≤10000</p><h4 id="输入样例1："><a href="#输入样例1：" class="headerlink" title="输入样例1："></a>输入样例1：</h4><pre><code>53 1 2 5 4</code></pre><h4 id="输出样例1："><a href="#输出样例1：" class="headerlink" title="输出样例1："></a>输出样例1：</h4><pre><code>3</code></pre><h4 id="输入样例2："><a href="#输入样例2：" class="headerlink" title="输入样例2："></a>输入样例2：</h4><pre><code>55 4 3 2 1</code></pre><h4 id="输出样例2："><a href="#输出样例2：" class="headerlink" title="输出样例2："></a>输出样例2：</h4><pre><code>2</code></pre><h4 id="题解分析："><a href="#题解分析：" class="headerlink" title="题解分析："></a>题解分析：</h4><p>环、置换群问题</p><p>比如有 5个瓶子：序列为2 1 3 5 4</p><p>下标：1 2 3 4 5 </p><p>序号：2 1 3 5 4</p><p>那么，此序列构成的环为 </p><p><img src="/../images/%E7%8E%AF%E3%80%81%E7%BD%AE%E6%8D%A2%E7%BE%A4%E9%97%AE%E9%A2%98/image-20211118220425050.png" alt="image-20211118220425050"></p><p>每个序号指向序列复位后每个序号应该在的位置，就是环的构建方式。</p><p>构建出来的环满足这样的特性：每个点的出度和入度均为 1 </p><p>可以发现，</p><p>如果我们交换不同环中的两个点：两个环会合并成一个环</p><p>如果交换同一个环中的两个点：一个环会分裂成两个环</p><p>如果序列有n个数，我们最终的结果是需要将环分裂为 n 个，这样每个点都指向他自己，序列也会复位。</p><p>因此我们必须每次交换同一个环中的点，可知交换一次环数加1，统计环的个数，如果有 k 个环，则需要 n - k 个操作使其变成 n 个环。</p><p>此题得解。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">10005</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//把此环中的每个结点都遍历一遍 ，关键在于 j = a[j] </span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span> st<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token boolean">true</span><span class="token punctuation">;</span> j<span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                st<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>n<span class="token operator">-</span>k<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 环 </tag>
            
            <tag> 置换群 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日志统计（滑动窗口，双指针问题）</title>
      <link href="/2021/11/18/ri-zhi-tong-ji-hua-dong-chuang-kou-shuang-zhi-zhen-wen-ti/"/>
      <url>/2021/11/18/ri-zhi-tong-ji-hua-dong-chuang-kou-shuang-zhi-zhen-wen-ti/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.acwing.com/problem/content/1240/">日志统计</a></p><p>小明维护着一个程序员论坛。现在他收集了一份”点赞”日志，日志共有 N 行。</p><p>其中每一行的格式是：</p><p>ts id<br>表示在 ts 时刻编号 id 的帖子收到一个”赞”。</p><p>现在小明想统计有哪些帖子曾经是”热帖”。</p><p>如果一个帖子曾在任意一个长度为 D 的时间段内收到不少于 K 个赞，小明就认为这个帖子曾是”热帖”。</p><p>具体来说，如果存在某个时刻 T 满足该帖在 [T,T+D) 这段时间内(注意是左闭右开区间)收到不少于 K 个赞，该帖就曾是”热帖”。</p><p>给定日志，请你帮助小明统计出所有曾是”热帖”的帖子编号。</p><p>输入格式<br>第一行包含三个整数 N,D,K。</p><p>以下 N 行每行一条日志，包含两个整数 ts 和 id。</p><p>输出格式<br>按从小到大的顺序输出热帖 id。</p><p>每个 id 占一行。</p><p>数据范围<br>1≤K≤N≤105,<br>0≤ts,id≤105,<br>1≤D≤10000<br>输入样例：<br>7 10 2<br>0 1<br>0 10<br>10 10<br>10 1<br>9 1<br>100 3<br>100 3<br>输出样例：<br>1<br>3</p><p>==题解思路==：<br>滑动窗口，双指针问题：<br>遍历时间段，前指针 i ，后指针 j ，logs[i].second对应的帖子点赞增加，前指针 i++<br>如果 logs[i].first - logs[j].first &gt; D 超过题目给定的时刻区间，<br>则把logs[j].second 对应的帖子点赞数减少，<br>同时 j++，直到不满足 logs[i].first - logs[j].first &gt; D 。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> PII<span class="token punctuation">;</span>PII logs<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> cnt<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录每个帖子的点赞数</span><span class="token keyword">bool</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//记录是热帖的</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>d<span class="token punctuation">,</span>k<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>d<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>logs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">,</span> <span class="token operator">&amp;</span>logs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>logs<span class="token punctuation">,</span>logs<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> id <span class="token operator">=</span> logs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>        cnt<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>logs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">-</span> logs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">>=</span> d<span class="token punctuation">)</span><span class="token punctuation">{</span>            cnt<span class="token punctuation">[</span>logs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">>=</span>k<span class="token punctuation">)</span> st<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 滑动窗口 </tag>
            
            <tag> 双指针````````````````` </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三体攻击(3维前缀和)</title>
      <link href="/2021/11/17/2021-11-17-san-ti-gong-ji-3-wei-qian-zhui-he/"/>
      <url>/2021/11/17/2021-11-17-san-ti-gong-ji-3-wei-qian-zhui-he/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.acwing.com/problem/content/description/1234/">三体攻击</a></p><p>三体人将对地球发起攻击。</p><p>为了抵御攻击，地球人派出了 A×B×C 艘战舰，在太空中排成一个 A 层 B 行 C 列的立方体。</p><p>其中，第 i 层第 j 行第 k 列的战舰（记为战舰 (i,j,k)）的生命值为 d(i,j,k)。</p><p>三体人将会对地球发起 m 轮“立方体攻击”，每次攻击会对一个小立方体中的所有战舰都造成相同的伤害。</p><p>具体地，第 t 轮攻击用 7 个参数 lat,rat,lbt,rbt,lct,rct,ht 描述；</p><p>所有满足 i∈[lat,rat],j∈[lbt,rbt],k∈[lct,rct] 的战舰 (i,j,k) 会受到 ht 的伤害。</p><p>如果一个战舰累计受到的总伤害超过其防御力，那么这个战舰会爆炸。</p><p>地球指挥官希望你能告诉他，第一艘爆炸的战舰是在哪一轮攻击后爆炸的。</p><p>输入格式<br>第一行包括 4 个正整数 A,B,C,m；</p><p>第二行包含 A×B×C 个整数，其中第 ((i−1)×B+(j−1))×C+(k−1)+1 个数为 d(i, j, k)；</p><p>第 3 到第 m+2 行中，第 (t − 2) 行包含 7 个正整数 lat, rat, lbt, rbt, lct, rct, ht。</p><p>输出格式<br>输出第一个爆炸的战舰是在哪一轮攻击后爆炸的。</p><p>保证一定存在这样的战舰。</p><p>数据范围<br>1≤A×B×C≤106,<br>1≤m≤106,<br>0≤d(i, j, k), ht≤109,<br>1≤lat≤rat≤A,<br>1≤lbt≤rbt≤B,<br>1≤lct≤rct≤C<br>层、行、列的编号都从 1 开始。</p><p>输入样例：<br>2 2 2 3<br>1 1 1 1 1 1 1 1<br>1 2 1 2 1 1 1<br>1 1 1 2 1 2 1<br>1 1 1 1 1 1 2<br>输出样例：<br>2<br>样例解释<br>在第 2 轮攻击后，战舰 (1,1,1) 总共受到了 2 点伤害，超出其防御力导致爆炸</p><p>==题解分析==：<br>前置知识：<br>三维前缀和公式：<br>S(x,y,z) = b(x,y,z) + S(x-1,y,z) + S(x,y-1,z) - S(x-1,y-1,z) + S(x,y,z-1) - S(x-1,y,z-1) - S(x,y-1,z-1) + S(x-1,y-1,z-1)<br>三维差分操作 给(x1,y1,z1) 到 (x2,y2,z2) 加 h，插入操作 ：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>LL b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> x1<span class="token punctuation">,</span><span class="token keyword">int</span> x2<span class="token punctuation">,</span><span class="token keyword">int</span> y1<span class="token punctuation">,</span><span class="token keyword">int</span> y2<span class="token punctuation">,</span><span class="token keyword">int</span> z1<span class="token punctuation">,</span><span class="token keyword">int</span> z2<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//三维差分操作</span><span class="token punctuation">{</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>    y1<span class="token punctuation">,</span>    z1<span class="token punctuation">)</span><span class="token punctuation">]</span>   <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>    y1<span class="token punctuation">,</span>    z2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>    y2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  z1<span class="token punctuation">)</span><span class="token punctuation">]</span>   <span class="token operator">-</span><span class="token operator">=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>    y2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  z2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  y1<span class="token punctuation">,</span>    z1<span class="token punctuation">)</span><span class="token punctuation">]</span>   <span class="token operator">-</span><span class="token operator">=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  y1<span class="token punctuation">,</span>    z2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  y2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  z1<span class="token punctuation">)</span><span class="token punctuation">]</span>   <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  y2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  z2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>ac代码：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">2000010</span><span class="token punctuation">;</span><span class="token keyword">int</span> A<span class="token punctuation">,</span>B<span class="token punctuation">,</span>C<span class="token punctuation">,</span>m<span class="token punctuation">;</span>LL s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>bp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> Op<span class="token punctuation">{</span>    <span class="token keyword">int</span> x1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>y2<span class="token punctuation">,</span>z1<span class="token punctuation">,</span>z2<span class="token punctuation">,</span>h<span class="token punctuation">;</span><span class="token punctuation">}</span>op<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span>B<span class="token operator">+</span><span class="token punctuation">(</span>j<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span>C<span class="token operator">+</span>k<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>LL b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> x1<span class="token punctuation">,</span><span class="token keyword">int</span> x2<span class="token punctuation">,</span><span class="token keyword">int</span> y1<span class="token punctuation">,</span><span class="token keyword">int</span> y2<span class="token punctuation">,</span><span class="token keyword">int</span> z1<span class="token punctuation">,</span><span class="token keyword">int</span> z2<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//三维差分操作</span><span class="token punctuation">{</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>    y1<span class="token punctuation">,</span>    z1<span class="token punctuation">)</span><span class="token punctuation">]</span>   <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>    y1<span class="token punctuation">,</span>    z2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>    y2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  z1<span class="token punctuation">)</span><span class="token punctuation">]</span>   <span class="token operator">-</span><span class="token operator">=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>    y2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  z2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  y1<span class="token punctuation">,</span>    z1<span class="token punctuation">)</span><span class="token punctuation">]</span>   <span class="token operator">-</span><span class="token operator">=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  y1<span class="token punctuation">,</span>    z2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  y2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  z1<span class="token punctuation">)</span><span class="token punctuation">]</span>   <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  y2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  z2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>bp<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>t<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//操作</span>        <span class="token function">insert</span><span class="token punctuation">(</span>bp<span class="token punctuation">,</span>op<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x1<span class="token punctuation">,</span>op<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x2<span class="token punctuation">,</span>op<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y1<span class="token punctuation">,</span>op<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y2<span class="token punctuation">,</span>op<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>z1<span class="token punctuation">,</span>op<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>z2<span class="token punctuation">,</span>op<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>A<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>B<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">&lt;=</span>C<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//三维前缀和</span>                bp<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>bp<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span>   k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                bp<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>bp<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>   j<span class="token number">-1</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                bp<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">=</span>bp<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">,</span> j<span class="token number">-1</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                bp<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>bp<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>   j<span class="token punctuation">,</span>   k<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                bp<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">=</span>bp<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span>   k<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                bp<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">=</span>bp<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>   j<span class="token number">-1</span><span class="token punctuation">,</span> k<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                bp<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>bp<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">,</span> j<span class="token number">-1</span><span class="token punctuation">,</span> k<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>bp<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>A<span class="token punctuation">,</span> <span class="token operator">&amp;</span>B<span class="token punctuation">,</span><span class="token operator">&amp;</span>C<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>A<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>B<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">&lt;=</span>C<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">insert</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>i<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">,</span>k<span class="token punctuation">,</span>s<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> x1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>y2<span class="token punctuation">,</span>z1<span class="token punctuation">,</span>z2<span class="token punctuation">,</span>h<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x1<span class="token punctuation">,</span><span class="token operator">&amp;</span>x2<span class="token punctuation">,</span><span class="token operator">&amp;</span>y1<span class="token punctuation">,</span><span class="token operator">&amp;</span>y2<span class="token punctuation">,</span><span class="token operator">&amp;</span>z1<span class="token punctuation">,</span><span class="token operator">&amp;</span>z2<span class="token punctuation">,</span><span class="token operator">&amp;</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        op<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>x1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>y2<span class="token punctuation">,</span>z1<span class="token punctuation">,</span>z2<span class="token punctuation">,</span><span class="token operator">-</span>h<span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> m<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果有爆炸的,往左继续找</span>            r <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> l <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果没有爆炸的，往右找</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前缀和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1维2维3维前缀和</title>
      <link href="/2021/11/17/2021-11-17-1-wei-2-wei-3-wei-qian-zhui-he/"/>
      <url>/2021/11/17/2021-11-17-1-wei-2-wei-3-wei-qian-zhui-he/</url>
      
        <content type="html"><![CDATA[<p>设b[]数组为前缀和数组，s[]数组为原数组</p><h3 id="一维前缀和"><a href="#一维前缀和" class="headerlink" title="一维前缀和"></a>一维前缀和</h3><ul><li><p>构造差分数组：$b[i]=s[i]-s[i-1]$</p></li><li><p>求原数组：$s[i]=b[i]+s[i-1]$</p></li><li><p>给 l 到 r 区间加 c ，插入操作：</p><p>b[l] += c</p><p>b[r+1] -= c</p></li></ul><h3 id="二维前缀和"><a href="#二维前缀和" class="headerlink" title="二维前缀和"></a>二维前缀和</h3><ul><li><p>构造差分数组：$b[i][j]=s[i][j]-s[i-1][j]-s[i][j-1]+s[i-1][j-1]$</p></li><li><p>求原数组：$s[i][j]=b[i][j]+s[i-1][j]+s[i][j-1]-s[i-1][j-1]$ </p></li><li><p>给(x1,y1)到(x2,y2) 加 c ,插入操作：</p><p>$b[x1][y1]+=c$ </p><p>$b[x2+1][y1]-=c$</p><p>$b[x1][y2+1]-=c$</p><p>$b[x2+1][y2+1]+=c$ </p></li></ul><h3 id="三维前缀和"><a href="#三维前缀和" class="headerlink" title="三维前缀和"></a>三维前缀和</h3><ul><li><p>S(x,y,z) = b(x,y,z) + S(x-1,y,z) + S(x,y-1,z) - S(x-1,y-1,z) + S(x,y,z-1) - S(x-1,y,z-1) - S(x,y-1,z-1) + S(x-1,y-1,z-1)​</p></li><li><p>由上式 可得 b(x,y,z) 计算公式，此处省略</p></li><li><p>给(x1,y1,z1) 到 (x2,y2,z2) 加 h，插入操作 ：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span>B<span class="token operator">+</span><span class="token punctuation">(</span>j<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span>C<span class="token operator">+</span><span class="token punctuation">(</span>k<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> x1<span class="token punctuation">,</span><span class="token keyword">int</span> x2<span class="token punctuation">,</span><span class="token keyword">int</span> y1<span class="token punctuation">,</span><span class="token keyword">int</span> y2<span class="token punctuation">,</span><span class="token keyword">int</span> z1<span class="token punctuation">,</span><span class="token keyword">int</span> z2<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>    y1<span class="token punctuation">,</span>    z1<span class="token punctuation">)</span><span class="token punctuation">]</span>   <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>    y1<span class="token punctuation">,</span>    z2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>    y2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  z1<span class="token punctuation">)</span><span class="token punctuation">]</span>   <span class="token operator">-</span><span class="token operator">=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>    y2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  z2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  y1<span class="token punctuation">,</span>    z1<span class="token punctuation">)</span><span class="token punctuation">]</span>   <span class="token operator">-</span><span class="token operator">=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  y1<span class="token punctuation">,</span>    z2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  y2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  z1<span class="token punctuation">)</span><span class="token punctuation">]</span>   <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  y2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  z2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><p><a href="2021-11-17-%E4%B8%89%E4%BD%93%E6%94%BB%E5%87%BB(3%E7%BB%B4%E5%89%8D%E7%BC%80%E5%92%8C).md">三维前缀和例题</a> </p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前缀和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【寒窑赋】吕蒙正</title>
      <link href="/2021/11/16/2021-11-16-han-yao-fu-lu-meng-zheng/"/>
      <url>/2021/11/16/2021-11-16-han-yao-fu-lu-meng-zheng/</url>
      
        <content type="html"><![CDATA[<h4 id="寒窑赋"><a href="#寒窑赋" class="headerlink" title="寒窑赋"></a>寒窑赋</h4><p>天有不测风云，人有旦夕祸福。</p><p>蜈蚣百足，行不及蛇；</p><p>雄鸡扇翼，飞不过鸦。</p><p>马有千里之程，无骑不能自往；</p><p>人有冲天之志，非运不能腾达。</p><p>文章盖世，孔子厄困于陈邦；武略超群，太公垂钓于渭水。</p><p>颜渊命短，实非凶恶之徒；盗跖年长，不是善良之辈。</p><p>尧舜明圣，却生不肖之儿；瞽叟愚顽，反生大孝之子。</p><p>张良原是布衣，萧何曾为县吏；韩信未遇之时，无一日之餐，及至遇行，腰悬三齐玉印。</p><p>楚霸英雄，败于乌江自刎；汉王柔弱，竟有万里江山。</p><p>晏子身短五尺，使楚拜齐名相；诸葛力无缚鸡，出作蜀汉军师。</p><p>李广有射虎之威，到老无封；冯夷有乘龙之才，一生不遇。</p><p>满腹文章，白发竟然不中；才疏学浅，少年及第登科。</p><p>深院宫娥，运退反为妓女；风流妓女，时来配作夫人。</p><p>青春美女，却招愚蠢之夫；俊秀郎君，反配粗丑之妇。</p><p>蛟龙未遇，潜水于鱼鳖之间；君子失时，拱手于小人之下。</p><p>天不得时，日月无光；地不得时，草木不生；</p><p>水不得时，波浪不静；人不得时，限运不通。</p><p>人生在世，富贵不能淫，贫贱不能移。有先贫而后富，有老壮而少衰。</p><p>衣服虽破，常有礼仪之容；面带忧愁，每抱怀安之量。</p><p>时遭不遇，只宜安贫守份；心若不欺，必有扬眉之日。</p><p>初贫君子，天然骨格生成；乍富小人，不脱贫寒肌体。</p><p>福禄岂能强求，富贵谁人不欲。</p>]]></content>
      
      
      <categories>
          
          <category> 摘抄 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文言文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《现代操作系统》书籍记录笔记</title>
      <link href="/2021/11/15/xian-dai-cao-zuo-xi-tong-shu-ji-ji-lu-bi-ji/"/>
      <url>/2021/11/15/xian-dai-cao-zuo-xi-tong-shu-ji-ji-lu-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章引论"><a href="#第一章引论" class="headerlink" title="第一章引论"></a>第一章引论</h2><ul><li>计算机的两种运行模式<br>计算机的两种运行模式：内核态和用户态<br>内核态中操作系统具有对所有硬件的完全访问权，可以执行机器能够运行的任何指令<br>用户态中禁止执行会影响机器控制或者可进行I/O操作的指令，仅允许执行整个指令集的一个子集和访问所有功能的一个子集</li></ul><ul><li><p>什么是操作系统<br>操作系统是一种运行在内核态的软件</p></li><li><p>计算机硬件简介<br>处理器（cpu）、存储器、磁盘、I/O设备、总线</p></li></ul><p><strong>todo</strong><br>处理器<br>存储器<br>磁盘<br>IO设备<br>总线</p><ul><li><p>上下文切换<br>在多道程序系统中，从一个程序切换到另一个程序，有时称为上下文切换</p></li><li><p>进程<br>进程本质上是正在执行的一个程序</p></li><li><p>进程表<br>与一个进程有关的所有信息，除进程自身地址空间的内容以外，均存放在进程表中，进程表是数组或者链表结构，每个进行都要占用一项</p></li><li><p>地址空间<br>每个进程可以使用的地址集合。在不使用虚拟内存时，一个进程可拥有的最大地址空间小于主存</p></li><li><p>虚拟内存<br>todo</p></li><li><p>一个挂起的进程包括：进程的地址空间和对应的进程表项（其中包括寄存器以及稍后重启动该进程所需要的许多其他信息）</p></li><li><p>进程间通信<br>合作完成某些作业的相关进程经常需要彼此通信以便同步他们的行为，这种进程称为进程间通信</p></li><li><p>文件</p></li></ul><p><strong>todo</strong></p><ul><li>管道<br>管道是一种虚文件，它可以连接两个进程，进程A和进程B通过管道传递数据进行通信</li><li>操作系统具有的两种功能<br>为用户程序提供抽象和管理计算机资源</li><li>操作系统的两种观点：资源管理观点和扩展的机器观点<br>资源管理观点认为操作系统的任务是有效的管理系统的各个部分<br>扩展的机器观点认为操作系统的任务是为用户提供比实际机器更于运用的抽象。这些抽象包括进程、地址空间以及文件</li><li>操作系统历史<br>早期批处理系统、多道程序系统、个人计算机</li></ul><h2 id="第三章内存管理"><a href="#第三章内存管理" class="headerlink" title="第三章内存管理"></a>第三章内存管理</h2><h4 id="存储管理器"><a href="#存储管理器" class="headerlink" title="存储管理器"></a>存储管理器</h4><p>操作系统中管理分层存储器体系的部分。它的任务是有效地管理内存，即记录哪些内存是正在使用的哪些内存是空闲的；在进程需要时为其分配内存，在进程使用完后释放内存。</p><h4 id="地址空间"><a href="#地址空间" class="headerlink" title="地址空间"></a>地址空间</h4><p>地址空间是一个进程可用于寻址内存的一套地址集合。每个进程都有一个自己的地址空间，并且这个地址空间独立于其他进程的地址空间（除了需要共享地址空间外）</p><h4 id="基址寄存器和界限寄存器"><a href="#基址寄存器和界限寄存器" class="headerlink" title="基址寄存器和界限寄存器"></a>基址寄存器和界限寄存器</h4><ul><li>基址寄存器和界限寄存器是两个特殊的硬件寄存器，用来给每个进程提供私有的地址空间，每个内存地址在送到内存之前，都会自动先加上基址寄存器的内容。</li><li>进程运行时，程序的起始物理地址装载到基址寄存器中，程序的长度装载到界限寄存器中。</li><li>当使用这两个寄存器时，程序装载到内存中连续空闲位置且装载期间无需重定位。</li></ul><p>缺点：每次访问内存都需要进行加法和比较运算。加法运算由于进位传递时间的问题，时间会很慢。</p><h4 id="处理内存超载的通用方法：交换技术、虚拟内存"><a href="#处理内存超载的通用方法：交换技术、虚拟内存" class="headerlink" title="处理内存超载的通用方法：交换技术、虚拟内存"></a>处理内存超载的通用方法：交换技术、虚拟内存</h4><p>交换技术即把一个进程完整调入内存，使该进程运行一段时间，然后把他存回磁盘。空闲进程主要存储在磁盘上。<br>虚拟内存：该策略能使程序在只有一部分被调入内存的情况下运行。<br><strong>内存紧缩</strong>：把内存中小的空闲区合并成一大块</p><h4 id="空闲内存管理"><a href="#空闲内存管理" class="headerlink" title="空闲内存管理"></a>空闲内存管理</h4><p><strong>首次适配算法、最佳适配算法</strong><br>首次适配算法：存储管理器沿着段链表</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 《现代操作系统》 </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>铁路与公路(Floyd)</title>
      <link href="/2021/11/14/2021-11-14-tie-lu-yu-gong-lu-floyd/"/>
      <url>/2021/11/14/2021-11-14-tie-lu-yu-gong-lu-floyd/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.acwing.com/problem/content/4077/">4074. 铁路与公路</a></p><p>某国家有 n 个城市（编号 1∼n）和 m 条双向铁路。</p><p>每条铁路连接两个不同的城市，没有两条铁路连接同一对城市。</p><p>除了铁路以外，该国家还有公路。</p><p>对于每对不同的城市 x,y，当且仅当它们之间没有铁路时，它们之间会存在一条双向公路。</p><p>经过每条铁路或公路都需要花费 1 小时的时间。</p><p>现在有一列火车和一辆汽车同时离开城市 1，它们的目的地都是城市 n。</p><p>它们不会在途中停靠（但是可以在城市 n 停靠）。</p><p>火车只能沿铁路行驶，汽车只能沿公路行驶。</p><p>请你为它们规划行进路线，每条路线中可重复经过同一条铁路或公路，但是为了避免发生事故，火车和汽车不得同时到达同一个城市（城市 n 除外）。</p><p>请问，在这些条件的约束下，两辆车全部到达城市 n 所需的最少小时数，即求更慢到达城市 n 的那辆车所需的时间的最小值。</p><p>注意，两辆车允许但不必要同时到达城市 n。</p><p>输入格式<br>第一行包含整数 n 和 m。</p><p>接下来 m 行，每行包含两个整数 u,v，表示城市 u 和城市 v 之间存在一条铁路。</p><p>输出格式<br>一个整数，表示所需的最少小时数。</p><p>如果至少有一辆车无法到达城市 n，则输出 −1。</p><p>数据范围<br>前 6 个测试点满足 2≤n≤10，0≤m≤10。<br>所有测试点满足 2≤n≤400，0≤m≤n(n−1)/2，1≤u,v≤n。</p><p>输入样例1：<br>4 2<br>1 3<br>3 4<br>输出样例1：<br>2<br>输入样例2：<br>4 6<br>1 2<br>1 3<br>1 4<br>2 3<br>2 4<br>3 4<br>输出样例2：<br>-1<br>输入样例3：<br>5 5<br>4 2<br>3 5<br>4 5<br>5 1<br>1 2<br>输出样例3：<br>3</p><p>题解分析：直接求两种方式从1 到达 n 的最大时间就是答案</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> INF 0x3f3f3f3f</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span><span class="token keyword">int</span> g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>t<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">floyd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">memset</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> u<span class="token punctuation">,</span>v<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>j <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span>                g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">floyd</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">floyd</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ans <span class="token operator">==</span> INF<span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Floyd </tag>
            
            <tag> 单源最短路 </tag>
            
            <tag> 模板题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小朋友排队(树状数组)</title>
      <link href="/2021/11/14/2021-11-14-xiao-peng-you-pai-dui/"/>
      <url>/2021/11/14/2021-11-14-xiao-peng-you-pai-dui/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.acwing.com/problem/content/description/1217/">小朋友排队(树状数组）</a></p><p>n 个小朋友站成一排。</p><p>现在要把他们按身高从低到高的顺序排列，但是每次只能交换位置相邻的两个小朋友。</p><p>每个小朋友都有一个不高兴的程度。</p><p>开始的时候，所有小朋友的不高兴程度都是 0。</p><p>如果某个小朋友第一次被要求交换，则他的不高兴程度增加 1，如果第二次要求他交换，则他的不高兴程度增加 2（即不高兴程度为 3），依次类推。当要求某个小朋友第 k 次交换时，他的不高兴程度增加 k。</p><p>请问，要让所有小朋友按从低到高排队，他们的不高兴程度之和最小是多少。</p><p>如果有两个小朋友身高一样，则他们谁站在谁前面是没有关系的。</p><p>输入格式<br>输入的第一行包含一个整数 n，表示小朋友的个数。</p><p>第二行包含 n 个整数 H1,H2,…,Hn，分别表示每个小朋友的身高。</p><p>输出格式<br>输出一行，包含一个整数，表示小朋友的不高兴程度和的最小值。</p><p>数据范围<br>1≤n≤100000,<br>0≤Hi≤1000000<br>输入样例：<br>3<br>3 2 1<br>输出样例：<br>9<br>样例解释<br>首先交换身高为3和2的小朋友，再交换身高为3和1的小朋友，再交换身高为2和1的小朋友，每个小朋友的不高兴程度都是3，总和为9。</p><p><strong>题解分析</strong>：<br>此题需要求他们的不高兴程度之和最小是多少，每个小朋友的第k次交换，不高兴的程度都会增加 k ，因此，每个小朋友如果交换 k 次到达正确位置，总的不高兴程度为1+2+3+…+k = （1+k) *k /2<br>那么此题应该让每个小朋友的交换次数达到最小，然后总的不高兴程度就是答案。</p><p>首先我们要先知道逆序对的概念：如果前一个数比后一个数大（可以不相邻）的话两个数可以构成一个逆序对。一个序列如果逆序对数量为0，则这个序列呈非降序排列，是有序的，符合题意的从低到高排序。<br>因此每次交换我们应该进行有意义的交换，意思是每次交换必须使得逆序对数量减少1，如果进行了无意义的交换，那么每个小朋友的交换次数就不是最小，达不到最优，最终的结果应该是逆序对数量消为 0 </p><p>设某个小朋友下标为 t<br>序列总的逆序对数量 = 每个小朋友逆序对数量总和<br>每个小朋友理论上的最小交换次数 = 与这个小朋友构成的逆序对数量 = 序列[1,t-1]中比他高的小朋友个数 + 序列 [ t+1, n] 中比这个小朋友低的小朋友个数。</p><p><strong>证明</strong>：<br>我们求出每个小朋友的最小交换次数，求不高兴程度加起来就是最小的，是答案。<br>每个小朋友都取最小交换次数是可以取得的，因为冒泡排序就是采用了这样的思想使得每次循环都让一个数的逆序对降为 0 。结论得证。</p><p><strong>解法</strong>：<br>使用树状数组存储每个数出现的次数，边遍历边维护树状数组，看代码理解吧<br>也可使用贪心 和 归并排序做。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1000005</span><span class="token punctuation">;</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>tree<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>sum<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//tree[i]树状数组存储每个数出现的次数</span><span class="token keyword">int</span> <span class="token function">lowbit</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> x<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>x<span class="token punctuation">;</span> i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span> i<span class="token operator">+</span><span class="token operator">=</span><span class="token function">lowbit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> v<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>x<span class="token punctuation">;</span> i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">-</span><span class="token operator">=</span><span class="token function">lowbit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ans <span class="token operator">+</span><span class="token operator">=</span> tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//求每个学生前面比他高的人数</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span>N<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">query</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">memset</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> tree<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//求每个学生后面比他低的人数</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    LL ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树状数组 </tag>
            
            <tag> 逆序对 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树</title>
      <link href="/2021/11/12/2021-11-12-xian-duan-shu/"/>
      <url>/2021/11/12/2021-11-12-xian-duan-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="线段树模板"><a href="#线段树模板" class="headerlink" title="线段树模板"></a>线段树模板</h2><p><a href="https://www.acwing.com/video/664/">https://www.acwing.com/video/664/</a></p><p><img src="/../images/2021-11-12-%E7%BA%BF%E6%AE%B5%E6%A0%91/image-20211114230014898.png" alt="image-20211114230014898"></p><p><img src="/../images/2021-11-12-%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/image-20211112203859684.png" alt="image-20211112203859684"></p><h3 id="数据存储："><a href="#数据存储：" class="headerlink" title="数据存储："></a>数据存储：</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录一下权重</span><span class="token keyword">struct</span> node<span class="token punctuation">{</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//左右区间</span>    <span class="token keyword">int</span> sum<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//总和</span><span class="token punctuation">}</span>tr<span class="token punctuation">[</span>N<span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记得开 4 倍空间</span></code></pre><h3 id="void-push-up-int-u"><a href="#void-push-up-int-u" class="headerlink" title="void push_up(int u)"></a>void push_up(int u)</h3><p>用子节点信息更新当前节点信息</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">push_up</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//利用它的两个儿子来算一下它的当前节点信息</span><span class="token punctuation">{</span>    tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">=</span>tr<span class="token punctuation">[</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">+</span>tr<span class="token punctuation">[</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//左儿子 u&lt;&lt;1 ,右儿子 u&lt;&lt;1|1  </span><span class="token punctuation">}</span></code></pre><h3 id="void-build-int-u-int-l-int-r"><a href="#void-build-int-u-int-l-int-r" class="headerlink" title="void build(int u,int l,int r)"></a>void build(int u,int l,int r)</h3><p>根结点为u，在一段区间[l,r]上初始化线段树</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*第一个参数，当前节点编号，第二个参数，左边界，第三个参数，右边界*/</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>w<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果当前已经是叶节点了，那我们就直接赋值就可以了</span>    <span class="token keyword">else</span><span class="token comment" spellcheck="true">//否则的话，说明当前区间长度至少是 2 对吧，那么我们需要把当前区间分为左右两个区间，那先要找边界点</span>    <span class="token punctuation">{</span>        tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>l<span class="token punctuation">,</span>r<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里记得赋值一下左右边界的初值</span>        <span class="token keyword">int</span> mid<span class="token operator">=</span>l<span class="token operator">+</span>r<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//边界的话直接去计算一下 l + r 的下取整</span>        <span class="token function">build</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//先递归一下左儿子</span>        <span class="token function">build</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//然后递归一下右儿子</span>        <span class="token function">push_up</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//做完两个儿子之后的话呢 push_up 一遍u 啊，更新一下当前节点信息</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="int-query-int-u-int-l-int-r"><a href="#int-query-int-u-int-l-int-r" class="headerlink" title="int query(int u,int l,int r)"></a>int query(int u,int l,int r)</h3><p>查询从根节点u开始往下找对应的[l,r]区间的和</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//查询的过程是从根结点开始往下找对应的一个区间</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&amp;&amp;</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span><span class="token keyword">return</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果当前区间已经完全被包含了，那么我们直接返回它的值就可以了</span>    <span class="token comment" spellcheck="true">//否则的话我们需要去递归来算</span>    <span class="token keyword">int</span> mid<span class="token operator">=</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">+</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算一下我们 当前 区间的中点是多少</span>    <span class="token comment" spellcheck="true">//先判断一下和左边有没有交集</span>    <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用 sum 来表示一下我们的总和</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">>=</span>l<span class="token punctuation">)</span>sum<span class="token operator">+</span><span class="token operator">=</span><span class="token function">query</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//看一下我们当前区间的中点和左边有没有交集</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">>=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//看一下我们当前区间的中点和右边有没有交集</span>    sum<span class="token operator">+</span><span class="token operator">=</span><span class="token function">query</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="void-modify-int-u-int-x-int-v"><a href="#void-modify-int-u-int-x-int-v" class="headerlink" title="void modify(int u,int x,int v)"></a>void modify(int u,int x,int v)</h3><p>根节点为u，修改位置为x，修改值 += v</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">modify</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//第一个参数也就是当前节点的编号,第二个参数是要修改的位置，第三个参数是要修改的值</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">==</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">+</span><span class="token operator">=</span>v<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//如果当前已经是叶节点了，那我们就直接让他的总和加上 v 就可以了</span>    <span class="token comment" spellcheck="true">//否则</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>      <span class="token keyword">int</span> mid<span class="token operator">=</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">+</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//看一下 x 是在左半边还是在右半边</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span><span class="token function">modify</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果是在左半边，那就找左儿子</span>      <span class="token keyword">else</span> <span class="token function">modify</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果在右半边，那就找右儿子</span>      <span class="token comment" spellcheck="true">//更新完之后当前节点的信息就要发生变化对吧，那么我们就需要 pushup 一遍</span>      <span class="token function">push_up</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="主函数区间查询和点单修改操作"><a href="#主函数区间查询和点单修改操作" class="headerlink" title="主函数区间查询和点单修改操作"></a>主函数区间查询和点单修改操作</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*第一个参数是根节点的下标，根节点是一号点，然后初始区间是 1 到 n */</span>    <span class="token comment" spellcheck="true">//后面的话就是一些修改操作了</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> k<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求和的时候，也是传三个参数，第一个的话是根节点的编号 ，第二个的话是我们查询的区间 </span>        <span class="token comment" spellcheck="true">//第一个参数也就是当前节点的编号</span>        <span class="token keyword">else</span>        <span class="token function">modify</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第一个参数是根节点的下标,第二个参数是要修改的位置，第三个参数是要修改的值</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>线段树例题：<a href="https://www.acwing.com/problem/content/1266/">https://www.acwing.com/problem/content/1266/</a></p><h3 id="代码整合（方便复制）"><a href="#代码整合（方便复制）" class="headerlink" title="代码整合（方便复制）:"></a>代码整合（方便复制）:</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录一下权重</span><span class="token keyword">struct</span> node<span class="token punctuation">{</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//左右区间</span>    <span class="token keyword">int</span> sum<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//总和</span><span class="token punctuation">}</span>tr<span class="token punctuation">[</span>N<span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记得开 4 倍空间</span><span class="token keyword">void</span> <span class="token function">push_up</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//利用它的两个儿子来算一下它的当前节点信息</span><span class="token punctuation">{</span>    tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">=</span>tr<span class="token punctuation">[</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">+</span>tr<span class="token punctuation">[</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//左儿子 u&lt;&lt;1 ,右儿子 u&lt;&lt;1|1  </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*第一个参数，当前节点编号，第二个参数，左边界，第三个参数，右边界*/</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>w<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果当前已经是叶节点了，那我们就直接赋值就可以了</span>    <span class="token keyword">else</span><span class="token comment" spellcheck="true">//否则的话，说明当前区间长度至少是 2 对吧，那么我们需要把当前区间分为左右两个区间，那先要找边界点</span>    <span class="token punctuation">{</span>        tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>l<span class="token punctuation">,</span>r<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里记得赋值一下左右边界的初值</span>        <span class="token keyword">int</span> mid<span class="token operator">=</span>l<span class="token operator">+</span>r<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//边界的话直接去计算一下 l + r 的下取整</span>        <span class="token function">build</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//先递归一下左儿子</span>        <span class="token function">build</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//然后递归一下右儿子</span>        <span class="token function">push_up</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//做完两个儿子之后的话呢 push_up 一遍u 啊，更新一下当前节点信息</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//查询的过程是从根结点开始往下找对应的一个区间</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&amp;&amp;</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span><span class="token keyword">return</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果当前区间已经完全被包含了，那么我们直接返回它的值就可以了</span>    <span class="token comment" spellcheck="true">//否则的话我们需要去递归来算</span>    <span class="token keyword">int</span> mid<span class="token operator">=</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">+</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算一下我们 当前 区间的中点是多少</span>    <span class="token comment" spellcheck="true">//先判断一下和左边有没有交集</span>    <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用 sum 来表示一下我们的总和</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">>=</span>l<span class="token punctuation">)</span>sum<span class="token operator">+</span><span class="token operator">=</span><span class="token function">query</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//看一下我们当前区间的中点和左边有没有交集</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">>=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//看一下我们当前区间的中点和右边有没有交集</span>    sum<span class="token operator">+</span><span class="token operator">=</span><span class="token function">query</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">modify</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//第一个参数也就是当前节点的编号,第二个参数是要修改的位置，第三个参数是要修改的值</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">==</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">+</span><span class="token operator">=</span>v<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//如果当前已经是叶节点了，那我们就直接让他的总和加上 v 就可以了</span>    <span class="token comment" spellcheck="true">//否则</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>      <span class="token keyword">int</span> mid<span class="token operator">=</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">+</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//看一下 x 是在左半边还是在右半边</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span><span class="token function">modify</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果是在左半边，那就找左儿子</span>      <span class="token keyword">else</span> <span class="token function">modify</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果在右半边，那就找右儿子</span>      <span class="token comment" spellcheck="true">//更新完之后当前节点的信息就要发生变化对吧，那么我们就需要 pushup 一遍</span>      <span class="token function">push_up</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*第一个参数是根节点的下标，根节点是一号点，然后初始区间是 1 到 n */</span>    <span class="token comment" spellcheck="true">//后面的话就是一些修改操作了</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> k<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求和的时候，也是传三个参数，第一个的话是根节点的编号 ，第二个的话是我们查询的区间 </span>        <span class="token comment" spellcheck="true">//第一个参数也就是当前节点的编号</span>        <span class="token keyword">else</span>        <span class="token function">modify</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第一个参数是根节点的下标,第二个参数是要修改的位置，第三个参数是要修改的值</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>作者：wyl13479387613链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>acwing<span class="token punctuation">.</span>com<span class="token operator">/</span>solution<span class="token operator">/</span>content<span class="token operator">/</span><span class="token number">40394</span><span class="token operator">/</span>来源：AcWing著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo中完美插入本地图片</title>
      <link href="/2021/11/12/hexo-zhong-wan-mei-cha-ru-ben-di-tu-pian/"/>
      <url>/2021/11/12/hexo-zhong-wan-mei-cha-ru-ben-di-tu-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo中完美插入本地图片"><a href="#hexo中完美插入本地图片" class="headerlink" title="hexo中完美插入本地图片"></a>hexo中完美插入本地图片</h2><p>两种方法解决解决hexo插入本地图片</p><p>先hexo new “文章名”，把图片放入<code>_posts/文章名</code> 文件夹中</p><ol><li>第一种，使用官方引用图片方式</li></ol><pre><code>{% asset_img example.jpg [title] %}</code></pre><ol start="2"><li>第二种使用插件</li></ol><p><a href="https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked </a> 解决hexo插入本地图片</p><p>_config.yml文件</p><pre><code>post_asset_folder: truemarked:    prependRoot: true    postAsset: true</code></pre><p>使用语法：</p><pre><code>![](image.jpg)</code></pre><p>这样可以引入，但是无法在markdown编辑器中显示图片</p><p>采用这种下面这种引入方式可解决：</p><ul><li><p>在“Blog-&gt;source”下新建”images”文件夹。注意”images”与”_posts”同级。</p></li><li><p>在Typora中“文件-&gt;设置偏好-&gt;图像“。在插入图片时”复制到指定路径“设置为</p></li></ul><pre class=" language-text"><code class="language-text">../../source/images//${filename}</code></pre><p>每次将图片插入到images下的文章名的文件夹下</p><p>引入图片，问题可完美解决</p><ol start="3"><li>使用图床引入外链</li></ol><p>图床网站 <a href="https://sm.ms/">https://sm.ms/</a></p><p>感觉这个最简单    </p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><ul><li><p>两种方法只有第二种引入图片在markdown编辑器中可见</p></li><li><p>参考互联网上文章使用hexo-asset-image插件，高版本hexo并不适配</p></li></ul><h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><p>知乎：<a href="https://www.zhihu.com/question/419663130">https://www.zhihu.com/question/419663130</a></p><p>博客：<a href="http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/">http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/</a></p><p>官方文档<a href="https://hexo.io/zh-cn/docs/asset-folders.html">https://hexo.io/zh-cn/docs/asset-folders.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo-renderer-marked </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树状数组</title>
      <link href="/2021/11/12/shu-zhuang-shu-zu-mo-ban/"/>
      <url>/2021/11/12/shu-zhuang-shu-zu-mo-ban/</url>
      
        <content type="html"><![CDATA[<h2 id="树状数组原理"><a href="#树状数组原理" class="headerlink" title="树状数组原理"></a>树状数组原理</h2><p><img src="/../images/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E6%A8%A1%E6%9D%BF/7416_68861e9035-31e23bc7b41ec145edb45cee8b55855-1636690330918.png" alt="31e23bc7b41ec145edb45cee8b55855.png"></p><p>1、lowbit(x):返回x的最后一位1</p><p>2、add(x,v):在x位置加上v，并将后面相关联的位置也加上v</p><p>3、query(x):询问x的前缀和</p><p>时间复杂度 $O(logn)$</p><h2 id="树状数组模板"><a href="#树状数组模板" class="headerlink" title="树状数组模板"></a>树状数组模板</h2><pre class=" language-c++"><code class="language-c++">const int N = 100005;int a[N],tree[N];int n,m;int lowbit(int x){    return x & (-x);}void update(int pos,int v){    for(int i=pos; i<N; i+=lowbit(i))    {        tree[i] += v;    }}int query(int n){    int ans = 0;    for(int pos=n; pos>0; pos-=lowbit(pos)) ans += tree[pos];    return ans;}int query(int a,int b){    return query(b) - query(a-1);}</code></pre><p>例题：<a href="https://www.acwing.com/problem/content/1266/">1264. 动态求连续区间和</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建及美化</title>
      <link href="/2021/11/12/2021-11-12-bo-ke-da-jian-ji-mei-hua/"/>
      <url>/2021/11/12/2021-11-12-bo-ke-da-jian-ji-mei-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="搭建框架"><a href="#搭建框架" class="headerlink" title="搭建框架"></a>搭建框架</h2><p>博客主要采用github + hexo + hexo-theme-matery进行搭建</p><p>此博客使用github pages进行托管，利用hexo搭建博客框架，使用hexo-theme-matery作为博客的主题。</p><p>hexo搭建博客可以下载多种主题，使用配置的方式让代码小白也能拥有自己的一个博客</p><p>hexo-theme-matery页面美观，成体系的架构博客，使得用户专注于博客内容得编写而省去开发得繁琐</p><h3 id="github项目地址"><a href="#github项目地址" class="headerlink" title="github项目地址"></a>github项目地址</h3><p><a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a>  </p><h2 id="博客主题美化"><a href="#博客主题美化" class="headerlink" title="博客主题美化"></a>博客主题美化</h2><ul><li>鼠标点击显示文字特效</li></ul><p><img src="/../images/2021-11-12-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/mouseclick.gif" alt="mouseclick"></p><p>参考文章：<a href="https://blog.csdn.net/victoryxa/article/details/105841309">https://blog.csdn.net/victoryxa/article/details/105841309</a></p><ul><li>代码高亮</li></ul><p>参考github <a href="https://github.com/ele828/hexo-prism-plugin">https://github.com/ele828/hexo-prism-plugin</a></p><h2 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h2><ul><li>给自己的博客加上看板娘——Live2d蕾姆 | 雷姆</li></ul><p>参考文章： <a href="https://zhuanlan.zhihu.com/p/35351118">https://zhuanlan.zhihu.com/p/35351118</a></p><ul><li>评价和邮件通知、音乐播放器</li></ul><p>参考：<a href="https://www.cnblogs.com/mfrank/p/12830097.html">https://www.cnblogs.com/mfrank/p/12830097.html</a></p><ul><li>主题魔改</li></ul><p>参考：<a href="https://juejin.cn/post/6844904132608786446">https://juejin.cn/post/6844904132608786446</a></p><ul><li>代码高亮不显示问题</li></ul><p><a href="https://prismjs.com/#languages-list">https://prismjs.com/#languages-list</a></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// Just a lil’ script to show off that inline JS gets highlighted</span>    window<span class="token punctuation">.</span>console <span class="token operator">&amp;&amp;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>assets/favicon.png<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Prism<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>assets/style.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>themes/prism.css<span class="token punctuation">"</span></span> <span class="token attr-name">data-noprefix</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>assets/vendor/prefixfree.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> _gaq <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'_setAccount'</span><span class="token punctuation">,</span> <span class="token string">'UA-33746269-1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'_trackPageview'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://www.google-analytics.com/ga.js<span class="token punctuation">"</span></span> <span class="token attr-name">async</span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/11/10/hellohexo/"/>
      <url>/2021/11/10/hellohexo/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
