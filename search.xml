<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>线段树</title>
      <link href="/2021/11/12/2021-11-12-xian-duan-shu/"/>
      <url>/2021/11/12/2021-11-12-xian-duan-shu/</url>
      
        <content type="html"><![CDATA[<p>线段树模板</p><p>数据存储：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int w[N];//记录一下权重struct node{    int l,r;//左右区间    int sum;//总和}tr[N*4];//记得开 4 倍空间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>void push_up(int u) 用子节点信息更新当前节点信息</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void push_up(int u)//利用它的两个儿子来算一下它的当前节点信息{    tr[u].sum=tr[u&lt;&lt;1].sum+tr[u&lt;&lt;1|1].sum;//左儿子 u&lt;&lt;1 ,右儿子 u&lt;&lt;1|1  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>void build(int u,int l,int r) 根结点为u，在一段区间[l,r]上初始化线段树</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void build(int u,int l,int r)/*第一个参数，当前节点编号，第二个参数，左边界，第三个参数，右边界*/{    if(l==r)tr[u]={l,r,w[r]};//如果当前已经是叶节点了，那我们就直接赋值就可以了    else//否则的话，说明当前区间长度至少是 2 对吧，那么我们需要把当前区间分为左右两个区间，那先要找边界点    {        tr[u]={l,r};//这里记得赋值一下左右边界的初值        int mid=l+r&gt;&gt;1;//边界的话直接去计算一下 l + r 的下取整        build(u&lt;&lt;1,l,mid);//先递归一下左儿子        build(u&lt;&lt;1|1,mid+1,r);//然后递归一下右儿子        push_up(u);//做完两个儿子之后的话呢 push_up 一遍u 啊，更新一下当前节点信息    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>int query(int u,int l,int r) 查询从根节点u开始往下找对应的[l,r]区间的和</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int query(int u,int l,int r)//查询的过程是从根结点开始往下找对应的一个区间{    if(l&lt;=tr[u].l&amp;&amp;tr[u].r&lt;=r)return tr[u].sum;//如果当前区间已经完全被包含了，那么我们直接返回它的值就可以了    //否则的话我们需要去递归来算    int mid=tr[u].l+tr[u].r&gt;&gt;1;//计算一下我们 当前 区间的中点是多少    //先判断一下和左边有没有交集    int sum=0;//用 sum 来表示一下我们的总和    if(mid&gt;=l)sum+=query(u&lt;&lt;1,l,r);//看一下我们当前区间的中点和左边有没有交集    if(r&gt;=mid+1)//看一下我们当前区间的中点和右边有没有交集    sum+=query(u&lt;&lt;1|1,l,r);    return sum;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>void modify(int u,int x,int v) 根节点为u，修改位置为x，修改值 += v</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void modify(int u,int x,int v)//第一个参数也就是当前节点的编号,第二个参数是要修改的位置，第三个参数是要修改的值{    if(tr[u].l==tr[u].r)tr[u].sum+=v; //如果当前已经是叶节点了，那我们就直接让他的总和加上 v 就可以了    //否则    else    {      int mid=tr[u].l+tr[u].r&gt;&gt;1;      //看一下 x 是在左半边还是在右半边      if(x&lt;=mid)modify(u&lt;&lt;1,x,v);//如果是在左半边，那就找左儿子      else modify(u&lt;&lt;1|1,x,v);//如果在右半边，那就找右儿子      //更新完之后当前节点的信息就要发生变化对吧，那么我们就需要 pushup 一遍      push_up(u);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主函数区间查询和点单修改操作</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int main(){    scanf("%d%d",&amp;n,&amp;m);    for(int i=1;i&lt;=n;i++)scanf("%d",&amp;w[i]);    build(1,1,n);/*第一个参数是根节点的下标，根节点是一号点，然后初始区间是 1 到 n */    //后面的话就是一些修改操作了    while(m--)    {        int k,a,b;        scanf("%d%d%d",&amp;k,&amp;a,&amp;b);        if(!k)printf("%d\n",query(1,a,b));//求和的时候，也是传三个参数，第一个的话是根节点的编号 ，第二个的话是我们查询的区间         //第一个参数也就是当前节点的编号        else        modify(1,a,b);//第一个参数是根节点的下标,第二个参数是要修改的位置，第三个参数是要修改的值    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>线段树例题：<a href="https://www.acwing.com/problem/content/1266/">https://www.acwing.com/problem/content/1266/</a></p><p><img src="/../images/2021-11-12-%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/image-20211112203856738.png" alt="image-20211112203856738"></p><p><img src="/../images/2021-11-12-%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/image-20211112203859684.png" alt="image-20211112203859684"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo中完美插入本地图片</title>
      <link href="/2021/11/12/hexo-zhong-wan-mei-cha-ru-ben-di-tu-pian/"/>
      <url>/2021/11/12/hexo-zhong-wan-mei-cha-ru-ben-di-tu-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo中完美插入本地图片"><a href="#hexo中完美插入本地图片" class="headerlink" title="hexo中完美插入本地图片"></a>hexo中完美插入本地图片</h2><p>两种方法解决解决hexo插入本地图片</p><p>先hexo new “文章名”，把图片放入<code>_posts/文章名</code> 文件夹中</p><ol><li>第一种，使用官方引用图片方式</li></ol><pre class="line-numbers language-none"><code class="language-none">{% asset_img example.jpg [title] %}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>第二种使用插件</li></ol><p><a href="https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked </a> 解决hexo插入本地图片</p><p>_config.yml文件</p><pre class="line-numbers language-none"><code class="language-none">post_asset_folder: truemarked:    prependRoot: true    postAsset: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用语法：</p><pre class="line-numbers language-none"><code class="language-none">![](image.jpg)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样可以引入，但是无法在markdown编辑器中显示图片</p><p>采用这种下面这种引入方式可解决：</p><ul><li><p>在“Blog-&gt;source”下新建”images”文件夹。注意”images”与”_posts”同级。</p></li><li><p>在Typora中“文件-&gt;设置偏好-&gt;图像“。在插入图片时”复制到指定路径“设置为</p></li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">../../source/images//${filename}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>每次将图片插入到images下的文章名的文件夹下</p><p>引入图片，问题可完美解决</p><ol start="3"><li>使用图床引入外链</li></ol><p>图床网站 <a href="https://sm.ms/">https://sm.ms/</a></p><p>感觉这个最简单    </p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><ul><li><p>两种方法只有第二种引入图片在markdown编辑器中可见</p></li><li><p>参考互联网上文章使用hexo-asset-image插件，高版本hexo并不适配</p></li></ul><h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><p>知乎：<a href="https://www.zhihu.com/question/419663130">https://www.zhihu.com/question/419663130</a></p><p>博客：<a href="http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/">http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/</a></p><p>官方文档<a href="https://hexo.io/zh-cn/docs/asset-folders.html">https://hexo.io/zh-cn/docs/asset-folders.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo-renderer-marked </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树状数组</title>
      <link href="/2021/11/12/shu-zhuang-shu-zu-mo-ban/"/>
      <url>/2021/11/12/shu-zhuang-shu-zu-mo-ban/</url>
      
        <content type="html"><![CDATA[<h2 id="树状数组原理"><a href="#树状数组原理" class="headerlink" title="树状数组原理"></a>树状数组原理</h2><p><img src="/../images/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E6%A8%A1%E6%9D%BF/7416_68861e9035-31e23bc7b41ec145edb45cee8b55855-1636690330918.png" alt="31e23bc7b41ec145edb45cee8b55855.png"></p><p>1、lowbit(x):返回x的最后一位1</p><p>2、add(x,v):在x位置加上v，并将后面相关联的位置也加上v</p><p>3、query(x):询问x的前缀和</p><p>时间复杂度 $O(logn)$</p><h2 id="树状数组模板"><a href="#树状数组模板" class="headerlink" title="树状数组模板"></a>树状数组模板</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">const int N = 100005;int a[N],tree[N];int n,m;int lowbit(int x){    return x &amp; (-x);}void update(int pos,int v){for(int i=pos; i&lt;N; i+=lowbit(i)){    tree[i] += v;}}int query(int n){    int ans = 0;    for(int pos=n; pos&gt;0; pos-=lowbit(pos)) ans += tree[pos];    return ans;}int query(int a,int b){    return query(b) - query(a-1);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例题：<a href="https://www.acwing.com/problem/content/1266/">1264. 动态求连续区间和</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建及美化</title>
      <link href="/2021/11/12/2021-11-12-bo-ke-da-jian-ji-mei-hua/"/>
      <url>/2021/11/12/2021-11-12-bo-ke-da-jian-ji-mei-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="搭建框架"><a href="#搭建框架" class="headerlink" title="搭建框架"></a>搭建框架</h2><p>博客主要采用github + hexo + hexo-theme-matery进行搭建</p><p>此博客使用github pages进行托管，利用hexo搭建博客框架，使用hexo-theme-matery作为博客的主题。</p><p>hexo搭建博客可以下载多种主题，使用配置的方式让代码小白也能拥有自己的一个博客</p><p>hexo-theme-matery页面美观，成体系的架构博客，使得用户专注于博客内容得编写而省去开发得繁琐</p><h3 id="github项目地址"><a href="#github项目地址" class="headerlink" title="github项目地址"></a>github项目地址</h3><p><a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a>  </p><h2 id="博客主题美化"><a href="#博客主题美化" class="headerlink" title="博客主题美化"></a>博客主题美化</h2><p>鼠标点击显示文字特效</p><p><img src="/../images/2021-11-12-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/mouseclick.gif" alt="mouseclick"></p><p>参考文章：<a href="https://blog.csdn.net/victoryxa/article/details/105841309">https://blog.csdn.net/victoryxa/article/details/105841309</a></p><h2 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h2><ul><li>给自己的博客加上看板娘——Live2d蕾姆 | 雷姆</li></ul><p>参考文章： <a href="https://zhuanlan.zhihu.com/p/35351118">https://zhuanlan.zhihu.com/p/35351118</a></p><ul><li>评价和邮件通知、音乐播放器</li></ul><p>参考：<a href="https://www.cnblogs.com/mfrank/p/12830097.html">https://www.cnblogs.com/mfrank/p/12830097.html</a></p><ul><li>主题魔改</li></ul><p>参考：<a href="https://juejin.cn/post/6844904132608786446">https://juejin.cn/post/6844904132608786446</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/11/10/hellohexo/"/>
      <url>/2021/11/10/hellohexo/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
