<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>铁路与公路(Floyd)</title>
      <link href="/2021/11/14/2021-11-14-tie-lu-yu-gong-lu-floyd/"/>
      <url>/2021/11/14/2021-11-14-tie-lu-yu-gong-lu-floyd/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.acwing.com/problem/content/4077/">4074. 铁路与公路</a></p><p>某国家有 n 个城市（编号 1∼n）和 m 条双向铁路。</p><p>每条铁路连接两个不同的城市，没有两条铁路连接同一对城市。</p><p>除了铁路以外，该国家还有公路。</p><p>对于每对不同的城市 x,y，当且仅当它们之间没有铁路时，它们之间会存在一条双向公路。</p><p>经过每条铁路或公路都需要花费 1 小时的时间。</p><p>现在有一列火车和一辆汽车同时离开城市 1，它们的目的地都是城市 n。</p><p>它们不会在途中停靠（但是可以在城市 n 停靠）。</p><p>火车只能沿铁路行驶，汽车只能沿公路行驶。</p><p>请你为它们规划行进路线，每条路线中可重复经过同一条铁路或公路，但是为了避免发生事故，火车和汽车不得同时到达同一个城市（城市 n 除外）。</p><p>请问，在这些条件的约束下，两辆车全部到达城市 n 所需的最少小时数，即求更慢到达城市 n 的那辆车所需的时间的最小值。</p><p>注意，两辆车允许但不必要同时到达城市 n。</p><p>输入格式<br>第一行包含整数 n 和 m。</p><p>接下来 m 行，每行包含两个整数 u,v，表示城市 u 和城市 v 之间存在一条铁路。</p><p>输出格式<br>一个整数，表示所需的最少小时数。</p><p>如果至少有一辆车无法到达城市 n，则输出 −1。</p><p>数据范围<br>前 6 个测试点满足 2≤n≤10，0≤m≤10。<br>所有测试点满足 2≤n≤400，0≤m≤n(n−1)/2，1≤u,v≤n。</p><p>输入样例1：<br>4 2<br>1 3<br>3 4<br>输出样例1：<br>2<br>输入样例2：<br>4 6<br>1 2<br>1 3<br>1 4<br>2 3<br>2 4<br>3 4<br>输出样例2：<br>-1<br>输入样例3：<br>5 5<br>4 2<br>3 5<br>4 5<br>5 1<br>1 2<br>输出样例3：<br>3</p><p>题解分析：直接求两种方式从1 到达 n 的最大时间就是答案</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> INF 0x3f3f3f3f</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span><span class="token keyword">int</span> g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>t<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">floyd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">memset</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> u<span class="token punctuation">,</span>v<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>j <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span>                g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">floyd</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">floyd</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ans <span class="token operator">==</span> INF<span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Floyd </tag>
            
            <tag> 单源最短路 </tag>
            
            <tag> 模板题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小朋友排队(树状数组)</title>
      <link href="/2021/11/14/2021-11-14-xiao-peng-you-pai-dui/"/>
      <url>/2021/11/14/2021-11-14-xiao-peng-you-pai-dui/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.acwing.com/problem/content/description/1217/">小朋友排队(树状数组）</a></p><p>n 个小朋友站成一排。</p><p>现在要把他们按身高从低到高的顺序排列，但是每次只能交换位置相邻的两个小朋友。</p><p>每个小朋友都有一个不高兴的程度。</p><p>开始的时候，所有小朋友的不高兴程度都是 0。</p><p>如果某个小朋友第一次被要求交换，则他的不高兴程度增加 1，如果第二次要求他交换，则他的不高兴程度增加 2（即不高兴程度为 3），依次类推。当要求某个小朋友第 k 次交换时，他的不高兴程度增加 k。</p><p>请问，要让所有小朋友按从低到高排队，他们的不高兴程度之和最小是多少。</p><p>如果有两个小朋友身高一样，则他们谁站在谁前面是没有关系的。</p><p>输入格式<br>输入的第一行包含一个整数 n，表示小朋友的个数。</p><p>第二行包含 n 个整数 H1,H2,…,Hn，分别表示每个小朋友的身高。</p><p>输出格式<br>输出一行，包含一个整数，表示小朋友的不高兴程度和的最小值。</p><p>数据范围<br>1≤n≤100000,<br>0≤Hi≤1000000<br>输入样例：<br>3<br>3 2 1<br>输出样例：<br>9<br>样例解释<br>首先交换身高为3和2的小朋友，再交换身高为3和1的小朋友，再交换身高为2和1的小朋友，每个小朋友的不高兴程度都是3，总和为9。</p><p><strong>题解分析</strong>：<br>此题需要求他们的不高兴程度之和最小是多少，每个小朋友的第k次交换，不高兴的程度都会增加 k ，因此，每个小朋友如果交换 k 次到达正确位置，总的不高兴程度为1+2+3+…+k = （1+k) *k /2<br>那么此题应该让每个小朋友的交换次数达到最小，然后总的不高兴程度就是答案。</p><p>首先我们要先知道逆序对的概念：如果前一个数比后一个数大（可以不相邻）的话两个数可以构成一个逆序对。一个序列如果逆序对数量为0，则这个序列呈非降序排列，是有序的，符合题意的从低到高排序。<br>因此每次交换我们应该进行有意义的交换，意思是每次交换必须使得逆序对数量减少1，如果进行了无意义的交换，那么每个小朋友的交换次数就不是最小，达不到最优，最终的结果应该是逆序对数量消为 0 </p><p>设某个小朋友下标为 t<br>序列总的逆序对数量 = 每个小朋友逆序对数量总和<br>每个小朋友理论上的最小交换次数 = 与这个小朋友构成的逆序对数量 = 序列[1,t-1]中比他高的小朋友个数 + 序列 [ t+1, n] 中比这个小朋友低的小朋友个数。</p><p><strong>证明</strong>：<br>我们求出每个小朋友的最小交换次数，求不高兴程度加起来就是最小的，是答案。<br>每个小朋友都取最小交换次数是可以取得的，因为冒泡排序就是采用了这样的思想使得每次循环都让一个数的逆序对降为 0 。结论得证。</p><p><strong>解法</strong>：<br>使用树状数组存储每个数出现的次数，边遍历边维护树状数组，看代码理解吧<br>也可使用贪心 和 归并排序做。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1000005</span><span class="token punctuation">;</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>tree<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>sum<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//tree[i]树状数组存储每个数出现的次数</span><span class="token keyword">int</span> <span class="token function">lowbit</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> x<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>x<span class="token punctuation">;</span> i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span> i<span class="token operator">+</span><span class="token operator">=</span><span class="token function">lowbit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> v<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>x<span class="token punctuation">;</span> i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">-</span><span class="token operator">=</span><span class="token function">lowbit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ans <span class="token operator">+</span><span class="token operator">=</span> tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//求每个学生前面比他高的人数</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span>N<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">query</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">memset</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> tree<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//求每个学生后面比他低的人数</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    LL ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树状数组 </tag>
            
            <tag> 逆序对 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树</title>
      <link href="/2021/11/12/2021-11-12-xian-duan-shu/"/>
      <url>/2021/11/12/2021-11-12-xian-duan-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="线段树模板"><a href="#线段树模板" class="headerlink" title="线段树模板"></a>线段树模板</h2><p><img src="/../images/2021-11-12-%E7%BA%BF%E6%AE%B5%E6%A0%91/image-20211114230014898.png" alt="image-20211114230014898"></p><p><img src="/../images/2021-11-12-%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/image-20211112203859684.png" alt="image-20211112203859684"></p><h3 id="数据存储："><a href="#数据存储：" class="headerlink" title="数据存储："></a>数据存储：</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录一下权重</span><span class="token keyword">struct</span> node<span class="token punctuation">{</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//左右区间</span>    <span class="token keyword">int</span> sum<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//总和</span><span class="token punctuation">}</span>tr<span class="token punctuation">[</span>N<span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记得开 4 倍空间</span></code></pre><h3 id="void-push-up-int-u"><a href="#void-push-up-int-u" class="headerlink" title="void push_up(int u)"></a>void push_up(int u)</h3><p>用子节点信息更新当前节点信息</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">push_up</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//利用它的两个儿子来算一下它的当前节点信息</span><span class="token punctuation">{</span>    tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">=</span>tr<span class="token punctuation">[</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">+</span>tr<span class="token punctuation">[</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//左儿子 u&lt;&lt;1 ,右儿子 u&lt;&lt;1|1  </span><span class="token punctuation">}</span></code></pre><h3 id="void-build-int-u-int-l-int-r"><a href="#void-build-int-u-int-l-int-r" class="headerlink" title="void build(int u,int l,int r)"></a>void build(int u,int l,int r)</h3><p>根结点为u，在一段区间[l,r]上初始化线段树</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*第一个参数，当前节点编号，第二个参数，左边界，第三个参数，右边界*/</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>w<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果当前已经是叶节点了，那我们就直接赋值就可以了</span>    <span class="token keyword">else</span><span class="token comment" spellcheck="true">//否则的话，说明当前区间长度至少是 2 对吧，那么我们需要把当前区间分为左右两个区间，那先要找边界点</span>    <span class="token punctuation">{</span>        tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>l<span class="token punctuation">,</span>r<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里记得赋值一下左右边界的初值</span>        <span class="token keyword">int</span> mid<span class="token operator">=</span>l<span class="token operator">+</span>r<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//边界的话直接去计算一下 l + r 的下取整</span>        <span class="token function">build</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//先递归一下左儿子</span>        <span class="token function">build</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//然后递归一下右儿子</span>        <span class="token function">push_up</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//做完两个儿子之后的话呢 push_up 一遍u 啊，更新一下当前节点信息</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="int-query-int-u-int-l-int-r"><a href="#int-query-int-u-int-l-int-r" class="headerlink" title="int query(int u,int l,int r)"></a>int query(int u,int l,int r)</h3><p>查询从根节点u开始往下找对应的[l,r]区间的和</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//查询的过程是从根结点开始往下找对应的一个区间</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&amp;&amp;</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span><span class="token keyword">return</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果当前区间已经完全被包含了，那么我们直接返回它的值就可以了</span>    <span class="token comment" spellcheck="true">//否则的话我们需要去递归来算</span>    <span class="token keyword">int</span> mid<span class="token operator">=</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">+</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算一下我们 当前 区间的中点是多少</span>    <span class="token comment" spellcheck="true">//先判断一下和左边有没有交集</span>    <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用 sum 来表示一下我们的总和</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">>=</span>l<span class="token punctuation">)</span>sum<span class="token operator">+</span><span class="token operator">=</span><span class="token function">query</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//看一下我们当前区间的中点和左边有没有交集</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">>=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//看一下我们当前区间的中点和右边有没有交集</span>    sum<span class="token operator">+</span><span class="token operator">=</span><span class="token function">query</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="void-modify-int-u-int-x-int-v"><a href="#void-modify-int-u-int-x-int-v" class="headerlink" title="void modify(int u,int x,int v)"></a>void modify(int u,int x,int v)</h3><p>根节点为u，修改位置为x，修改值 += v</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">modify</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//第一个参数也就是当前节点的编号,第二个参数是要修改的位置，第三个参数是要修改的值</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">==</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">+</span><span class="token operator">=</span>v<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//如果当前已经是叶节点了，那我们就直接让他的总和加上 v 就可以了</span>    <span class="token comment" spellcheck="true">//否则</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>      <span class="token keyword">int</span> mid<span class="token operator">=</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">+</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//看一下 x 是在左半边还是在右半边</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span><span class="token function">modify</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果是在左半边，那就找左儿子</span>      <span class="token keyword">else</span> <span class="token function">modify</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果在右半边，那就找右儿子</span>      <span class="token comment" spellcheck="true">//更新完之后当前节点的信息就要发生变化对吧，那么我们就需要 pushup 一遍</span>      <span class="token function">push_up</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="主函数区间查询和点单修改操作"><a href="#主函数区间查询和点单修改操作" class="headerlink" title="主函数区间查询和点单修改操作"></a>主函数区间查询和点单修改操作</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*第一个参数是根节点的下标，根节点是一号点，然后初始区间是 1 到 n */</span>    <span class="token comment" spellcheck="true">//后面的话就是一些修改操作了</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> k<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求和的时候，也是传三个参数，第一个的话是根节点的编号 ，第二个的话是我们查询的区间 </span>        <span class="token comment" spellcheck="true">//第一个参数也就是当前节点的编号</span>        <span class="token keyword">else</span>        <span class="token function">modify</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第一个参数是根节点的下标,第二个参数是要修改的位置，第三个参数是要修改的值</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>线段树例题：<a href="https://www.acwing.com/problem/content/1266/">https://www.acwing.com/problem/content/1266/</a></p><h3 id="代码整合（方便复制）"><a href="#代码整合（方便复制）" class="headerlink" title="代码整合（方便复制）:"></a>代码整合（方便复制）:</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录一下权重</span><span class="token keyword">struct</span> node<span class="token punctuation">{</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//左右区间</span>    <span class="token keyword">int</span> sum<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//总和</span><span class="token punctuation">}</span>tr<span class="token punctuation">[</span>N<span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记得开 4 倍空间</span><span class="token keyword">void</span> <span class="token function">push_up</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//利用它的两个儿子来算一下它的当前节点信息</span><span class="token punctuation">{</span>    tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">=</span>tr<span class="token punctuation">[</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">+</span>tr<span class="token punctuation">[</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//左儿子 u&lt;&lt;1 ,右儿子 u&lt;&lt;1|1  </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*第一个参数，当前节点编号，第二个参数，左边界，第三个参数，右边界*/</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>w<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果当前已经是叶节点了，那我们就直接赋值就可以了</span>    <span class="token keyword">else</span><span class="token comment" spellcheck="true">//否则的话，说明当前区间长度至少是 2 对吧，那么我们需要把当前区间分为左右两个区间，那先要找边界点</span>    <span class="token punctuation">{</span>        tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>l<span class="token punctuation">,</span>r<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里记得赋值一下左右边界的初值</span>        <span class="token keyword">int</span> mid<span class="token operator">=</span>l<span class="token operator">+</span>r<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//边界的话直接去计算一下 l + r 的下取整</span>        <span class="token function">build</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//先递归一下左儿子</span>        <span class="token function">build</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//然后递归一下右儿子</span>        <span class="token function">push_up</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//做完两个儿子之后的话呢 push_up 一遍u 啊，更新一下当前节点信息</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//查询的过程是从根结点开始往下找对应的一个区间</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&amp;&amp;</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span><span class="token keyword">return</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果当前区间已经完全被包含了，那么我们直接返回它的值就可以了</span>    <span class="token comment" spellcheck="true">//否则的话我们需要去递归来算</span>    <span class="token keyword">int</span> mid<span class="token operator">=</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">+</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算一下我们 当前 区间的中点是多少</span>    <span class="token comment" spellcheck="true">//先判断一下和左边有没有交集</span>    <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用 sum 来表示一下我们的总和</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">>=</span>l<span class="token punctuation">)</span>sum<span class="token operator">+</span><span class="token operator">=</span><span class="token function">query</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//看一下我们当前区间的中点和左边有没有交集</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">>=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//看一下我们当前区间的中点和右边有没有交集</span>    sum<span class="token operator">+</span><span class="token operator">=</span><span class="token function">query</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">modify</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//第一个参数也就是当前节点的编号,第二个参数是要修改的位置，第三个参数是要修改的值</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">==</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">+</span><span class="token operator">=</span>v<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//如果当前已经是叶节点了，那我们就直接让他的总和加上 v 就可以了</span>    <span class="token comment" spellcheck="true">//否则</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>      <span class="token keyword">int</span> mid<span class="token operator">=</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">+</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//看一下 x 是在左半边还是在右半边</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span><span class="token function">modify</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果是在左半边，那就找左儿子</span>      <span class="token keyword">else</span> <span class="token function">modify</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果在右半边，那就找右儿子</span>      <span class="token comment" spellcheck="true">//更新完之后当前节点的信息就要发生变化对吧，那么我们就需要 pushup 一遍</span>      <span class="token function">push_up</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*第一个参数是根节点的下标，根节点是一号点，然后初始区间是 1 到 n */</span>    <span class="token comment" spellcheck="true">//后面的话就是一些修改操作了</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> k<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求和的时候，也是传三个参数，第一个的话是根节点的编号 ，第二个的话是我们查询的区间 </span>        <span class="token comment" spellcheck="true">//第一个参数也就是当前节点的编号</span>        <span class="token keyword">else</span>        <span class="token function">modify</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第一个参数是根节点的下标,第二个参数是要修改的位置，第三个参数是要修改的值</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>作者：wyl13479387613链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>acwing<span class="token punctuation">.</span>com<span class="token operator">/</span>solution<span class="token operator">/</span>content<span class="token operator">/</span><span class="token number">40394</span><span class="token operator">/</span>来源：AcWing著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo中完美插入本地图片</title>
      <link href="/2021/11/12/hexo-zhong-wan-mei-cha-ru-ben-di-tu-pian/"/>
      <url>/2021/11/12/hexo-zhong-wan-mei-cha-ru-ben-di-tu-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo中完美插入本地图片"><a href="#hexo中完美插入本地图片" class="headerlink" title="hexo中完美插入本地图片"></a>hexo中完美插入本地图片</h2><p>两种方法解决解决hexo插入本地图片</p><p>先hexo new “文章名”，把图片放入<code>_posts/文章名</code> 文件夹中</p><ol><li>第一种，使用官方引用图片方式</li></ol><pre><code>{% asset_img example.jpg [title] %}</code></pre><ol start="2"><li>第二种使用插件</li></ol><p><a href="https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked </a> 解决hexo插入本地图片</p><p>_config.yml文件</p><pre><code>post_asset_folder: truemarked:    prependRoot: true    postAsset: true</code></pre><p>使用语法：</p><pre><code>![](image.jpg)</code></pre><p>这样可以引入，但是无法在markdown编辑器中显示图片</p><p>采用这种下面这种引入方式可解决：</p><ul><li><p>在“Blog-&gt;source”下新建”images”文件夹。注意”images”与”_posts”同级。</p></li><li><p>在Typora中“文件-&gt;设置偏好-&gt;图像“。在插入图片时”复制到指定路径“设置为</p></li></ul><pre class=" language-text"><code class="language-text">../../source/images//${filename}</code></pre><p>每次将图片插入到images下的文章名的文件夹下</p><p>引入图片，问题可完美解决</p><ol start="3"><li>使用图床引入外链</li></ol><p>图床网站 <a href="https://sm.ms/">https://sm.ms/</a></p><p>感觉这个最简单    </p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><ul><li><p>两种方法只有第二种引入图片在markdown编辑器中可见</p></li><li><p>参考互联网上文章使用hexo-asset-image插件，高版本hexo并不适配</p></li></ul><h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><p>知乎：<a href="https://www.zhihu.com/question/419663130">https://www.zhihu.com/question/419663130</a></p><p>博客：<a href="http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/">http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/</a></p><p>官方文档<a href="https://hexo.io/zh-cn/docs/asset-folders.html">https://hexo.io/zh-cn/docs/asset-folders.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo-renderer-marked </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树状数组</title>
      <link href="/2021/11/12/shu-zhuang-shu-zu-mo-ban/"/>
      <url>/2021/11/12/shu-zhuang-shu-zu-mo-ban/</url>
      
        <content type="html"><![CDATA[<h2 id="树状数组原理"><a href="#树状数组原理" class="headerlink" title="树状数组原理"></a>树状数组原理</h2><p><img src="/../images/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E6%A8%A1%E6%9D%BF/7416_68861e9035-31e23bc7b41ec145edb45cee8b55855-1636690330918.png" alt="31e23bc7b41ec145edb45cee8b55855.png"></p><p>1、lowbit(x):返回x的最后一位1</p><p>2、add(x,v):在x位置加上v，并将后面相关联的位置也加上v</p><p>3、query(x):询问x的前缀和</p><p>时间复杂度 $O(logn)$</p><h2 id="树状数组模板"><a href="#树状数组模板" class="headerlink" title="树状数组模板"></a>树状数组模板</h2><pre class=" language-c++"><code class="language-c++">const int N = 100005;int a[N],tree[N];int n,m;int lowbit(int x){    return x & (-x);}void update(int pos,int v){    for(int i=pos; i<N; i+=lowbit(i))    {        tree[i] += v;    }}int query(int n){    int ans = 0;    for(int pos=n; pos>0; pos-=lowbit(pos)) ans += tree[pos];    return ans;}int query(int a,int b){    return query(b) - query(a-1);}</code></pre><p>例题：<a href="https://www.acwing.com/problem/content/1266/">1264. 动态求连续区间和</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建及美化</title>
      <link href="/2021/11/12/2021-11-12-bo-ke-da-jian-ji-mei-hua/"/>
      <url>/2021/11/12/2021-11-12-bo-ke-da-jian-ji-mei-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="搭建框架"><a href="#搭建框架" class="headerlink" title="搭建框架"></a>搭建框架</h2><p>博客主要采用github + hexo + hexo-theme-matery进行搭建</p><p>此博客使用github pages进行托管，利用hexo搭建博客框架，使用hexo-theme-matery作为博客的主题。</p><p>hexo搭建博客可以下载多种主题，使用配置的方式让代码小白也能拥有自己的一个博客</p><p>hexo-theme-matery页面美观，成体系的架构博客，使得用户专注于博客内容得编写而省去开发得繁琐</p><h3 id="github项目地址"><a href="#github项目地址" class="headerlink" title="github项目地址"></a>github项目地址</h3><p><a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a>  </p><h2 id="博客主题美化"><a href="#博客主题美化" class="headerlink" title="博客主题美化"></a>博客主题美化</h2><ul><li>鼠标点击显示文字特效</li></ul><p><img src="/../images/2021-11-12-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/mouseclick.gif" alt="mouseclick"></p><p>参考文章：<a href="https://blog.csdn.net/victoryxa/article/details/105841309">https://blog.csdn.net/victoryxa/article/details/105841309</a></p><ul><li>代码高亮</li></ul><p>参考github <a href="https://github.com/ele828/hexo-prism-plugin">https://github.com/ele828/hexo-prism-plugin</a></p><h2 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h2><ul><li>给自己的博客加上看板娘——Live2d蕾姆 | 雷姆</li></ul><p>参考文章： <a href="https://zhuanlan.zhihu.com/p/35351118">https://zhuanlan.zhihu.com/p/35351118</a></p><ul><li>评价和邮件通知、音乐播放器</li></ul><p>参考：<a href="https://www.cnblogs.com/mfrank/p/12830097.html">https://www.cnblogs.com/mfrank/p/12830097.html</a></p><ul><li>主题魔改</li></ul><p>参考：<a href="https://juejin.cn/post/6844904132608786446">https://juejin.cn/post/6844904132608786446</a></p><ul><li>代码高亮不显示问题</li></ul><p><a href="https://prismjs.com/#languages-list">https://prismjs.com/#languages-list</a></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// Just a lil’ script to show off that inline JS gets highlighted</span>    window<span class="token punctuation">.</span>console <span class="token operator">&amp;&amp;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>assets/favicon.png<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Prism<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>assets/style.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>themes/prism.css<span class="token punctuation">"</span></span> <span class="token attr-name">data-noprefix</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>assets/vendor/prefixfree.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> _gaq <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'_setAccount'</span><span class="token punctuation">,</span> <span class="token string">'UA-33746269-1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'_trackPageview'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://www.google-analytics.com/ga.js<span class="token punctuation">"</span></span> <span class="token attr-name">async</span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/11/10/hellohexo/"/>
      <url>/2021/11/10/hellohexo/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
