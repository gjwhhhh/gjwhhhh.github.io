<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ping程序的实现</title>
      <link href="/2021/12/26/2021-12-26-ping-cheng-xu-de-shi-xian/"/>
      <url>/2021/12/26/2021-12-26-ping-cheng-xu-de-shi-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="网络编程与协议分析-ping程序的实现"><a href="#网络编程与协议分析-ping程序的实现" class="headerlink" title="网络编程与协议分析 ping程序的实现"></a>网络编程与协议分析 ping程序的实现</h1><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;Winsock2.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;ws2tcpip.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;malloc.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstddef></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">pragma</span> comment(lib, "ws2_32.lib")</span><span class="token macro property">#<span class="token directive keyword">define</span> ICMP_ECHO_REQUEST 8 </span><span class="token comment" spellcheck="true">//定义回显请求类型</span><span class="token macro property">#<span class="token directive keyword">define</span> DEF_ICMP_DATA_SIZE 20 </span><span class="token comment" spellcheck="true">//定义发送数据长度</span><span class="token macro property">#<span class="token directive keyword">define</span> DEF_ICMP_PACK_SIZE 32 </span><span class="token comment" spellcheck="true">//定义数据包长度</span><span class="token macro property">#<span class="token directive keyword">define</span> MAX_ICMP_PACKET_SIZE 1024 </span><span class="token comment" spellcheck="true">//定义最大数据包长度</span><span class="token macro property">#<span class="token directive keyword">define</span> DEF_ICMP_TIMEOUT 3000  </span><span class="token comment" spellcheck="true">//定义超时为3秒</span><span class="token macro property">#<span class="token directive keyword">define</span> ICMP_TIMEOUT 11 </span><span class="token comment" spellcheck="true">//ICMP超时报文</span><span class="token macro property">#<span class="token directive keyword">define</span> ICMP_ECHO_REPLY 0 </span><span class="token comment" spellcheck="true">//定义回显应答类型</span>using namespace std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* *IP报头结构 */</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    byte h_len_ver<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//IP版本号</span>    byte tos<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 服务类型</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> total_len<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//IP包总长度</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> ident<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 标识</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> frag_and_flags<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//标志位</span>    byte ttl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//生存时间</span>    byte proto<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//协议</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> cksum<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//IP首部校验和</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> sourceIP<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//源IP地址</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> destIP<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//目的IP地址</span><span class="token punctuation">}</span> IP_HEADER<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* *定义ICMP数据类型 */</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> _ICMP_HEADER<span class="token punctuation">{</span>    byte type<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//类型-----8</span>    byte code<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//代码-----8</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> cksum<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//校验和------16</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> id<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//标识符-------16</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> seq<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//序列号------16</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> choose<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//选项-------32</span><span class="token punctuation">}</span> ICMP_HEADER<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> usSeqNo<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//记录序列号</span>    DWORD dwRoundTripTime<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//记录当前时间</span>    byte ttl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//生存时间</span>    in_addr dwIPaddr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//源IP地址</span><span class="token punctuation">}</span> DECODE_RESULT<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* *产生网际校验和 */</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token function">GenerateChecksum</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span><span class="token operator">*</span> pBuf<span class="token punctuation">,</span> <span class="token keyword">int</span> iSize<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> cksum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//开始时将网际校验和初始化为0</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>iSize <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cksum <span class="token operator">+</span><span class="token operator">=</span> <span class="token operator">*</span>pBuf<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将待校验的数据每16位逐位相加保存在cksum中</span>        iSize <span class="token operator">-</span><span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//每16位加完则将带校验数据量减去16</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//如果待校验的数据为奇数，则循环完之后需将最后一个字节的内容与之前结果相加</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>iSize<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cksum <span class="token operator">+</span><span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>pBuf<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//之前的结果产生了进位，需要把进位也加入最后的结果中</span>    cksum <span class="token operator">=</span> <span class="token punctuation">(</span>cksum <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>cksum <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cksum <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>cksum <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">~</span>cksum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* *对ping应答信息进行解析 */</span>boolean <span class="token function">DecodeIcmpResponse_Ping</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> pBuf<span class="token punctuation">,</span> <span class="token keyword">int</span> iPacketSize<span class="token punctuation">,</span> DECODE_RESULT<span class="token operator">*</span> stDecodeResult<span class="token punctuation">)</span><span class="token punctuation">{</span>    IP_HEADER<span class="token operator">*</span> pIpHrd <span class="token operator">=</span> <span class="token punctuation">(</span>IP_HEADER<span class="token operator">*</span><span class="token punctuation">)</span>pBuf<span class="token punctuation">;</span>    <span class="token keyword">int</span> iIphedLen <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>iPacketSize <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>iIphedLen <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ICMP_HEADER<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"size error! \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//指针指向ICMP报文的首地址</span>    ICMP_HEADER<span class="token operator">*</span> pIcmpHrd <span class="token operator">=</span> <span class="token punctuation">(</span>ICMP_HEADER<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>pBuf <span class="token operator">+</span> iIphedLen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> usID<span class="token punctuation">,</span> usSeqNo<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获得的数据包的type字段为ICMP_ECHO_REPLY，即收到一个回显应答ICMP报文</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pIcmpHrd<span class="token operator">-></span>type <span class="token operator">==</span> ICMP_ECHO_REPLY<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        usID <span class="token operator">=</span> pIcmpHrd<span class="token operator">-></span>id<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//接收到的是网络字节顺序的seq字段信息 ， 需转化为主机字节顺序</span>        usSeqNo <span class="token operator">=</span> <span class="token function">ntohs</span><span class="token punctuation">(</span>pIcmpHrd<span class="token operator">-></span>seq<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>usID <span class="token operator">!=</span> <span class="token function">GetCurrentProcessId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> usSeqNo <span class="token operator">!=</span> stDecodeResult<span class="token operator">-></span>usSeqNo<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"usID error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//记录对方主机的IP地址以及计算往返的时延RTT</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pIcmpHrd<span class="token operator">-></span>type <span class="token operator">==</span> ICMP_ECHO_REPLY<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        stDecodeResult<span class="token operator">-></span>dwIPaddr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> pIpHrd<span class="token operator">-></span>sourceIP<span class="token punctuation">;</span>        stDecodeResult<span class="token operator">-></span>ttl <span class="token operator">=</span> pIpHrd<span class="token operator">-></span>ttl<span class="token punctuation">;</span>        stDecodeResult<span class="token operator">-></span>dwRoundTripTime <span class="token operator">=</span> <span class="token function">GetTickCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> stDecodeResult<span class="token operator">-></span>dwRoundTripTime<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Ping</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> IP<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//初始化WinSock</span>    WORD wVersionRequested <span class="token operator">=</span> <span class="token function">MAKEWORD</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    WSADATA wsaData<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">WSAStartup</span><span class="token punctuation">(</span>wVersionRequested<span class="token punctuation">,</span> <span class="token operator">&amp;</span>wsaData<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"初始化WinSock失败！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> ulDestIP <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span>IP<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将IP地址转化为长整形</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ulDestIP <span class="token operator">==</span> INADDR_NONE<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//转化不成功时按域名解析</span>        HOSTENT<span class="token operator">*</span> pHostent <span class="token operator">=</span> <span class="token function">gethostbyname</span><span class="token punctuation">(</span>IP<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pHostent<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"地址解析失败！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            ulDestIP <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>IN_ADDR<span class="token operator">*</span><span class="token punctuation">)</span>pHostent<span class="token operator">-></span>h_addr<span class="token punctuation">)</span><span class="token punctuation">.</span>s_addr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将HOSTENT转化为长整形</span>        <span class="token punctuation">}</span>           <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//填充目的Socket地址</span>    SOCKADDR_IN destSockAddr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义目的地址</span>    <span class="token function">ZeroMemory</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>destSockAddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>SOCKADDR_IN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将目的地址清空</span>    destSockAddr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>    destSockAddr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> ulDestIP<span class="token punctuation">;</span>    destSockAddr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用ICMP协议创建Raw Socket</span>    SOCKET sockRaw <span class="token operator">=</span> <span class="token function">WSASocket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_RAW<span class="token punctuation">,</span> IPPROTO_ICMP<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> WSA_FLAG_OVERLAPPED<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sockRaw <span class="token operator">==</span> INVALID_SOCKET<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"创建Socket失败 !\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//设置端口属性</span>    <span class="token keyword">int</span> iTimeout <span class="token operator">=</span> DEF_ICMP_TIMEOUT<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">setsockopt</span><span class="token punctuation">(</span>sockRaw<span class="token punctuation">,</span> SOL_SOCKET<span class="token punctuation">,</span> SO_RCVTIMEO<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>iTimeout<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>iTimeout<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> SOCKET_ERROR<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"设置参数失败！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">setsockopt</span><span class="token punctuation">(</span>sockRaw<span class="token punctuation">,</span> SOL_SOCKET<span class="token punctuation">,</span> SO_SNDTIMEO<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>iTimeout<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>iTimeout<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> SOCKET_ERROR<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"设置参数失败！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//定义发送的数据段</span>    <span class="token keyword">char</span> IcmpSendBuf<span class="token punctuation">[</span>DEF_ICMP_PACK_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//填充ICMP数据包个各字段</span>    ICMP_HEADER<span class="token operator">*</span> pIcmpHeader <span class="token operator">=</span> <span class="token punctuation">(</span>ICMP_HEADER<span class="token operator">*</span><span class="token punctuation">)</span>IcmpSendBuf<span class="token punctuation">;</span>    pIcmpHeader<span class="token operator">-></span>type <span class="token operator">=</span> ICMP_ECHO_REQUEST<span class="token punctuation">;</span>    pIcmpHeader<span class="token operator">-></span>code <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    pIcmpHeader<span class="token operator">-></span>id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span><span class="token punctuation">)</span><span class="token function">GetCurrentProcessId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>IcmpSendBuf <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ICMP_HEADER<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">,</span> DEF_ICMP_DATA_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//循环发送四个请求回显icmp数据包</span>    <span class="token keyword">int</span> usSeqNo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    DECODE_RESULT stDecodeResult<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>usSeqNo <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        pIcmpHeader<span class="token operator">-></span>seq <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>usSeqNo<span class="token punctuation">)</span><span class="token punctuation">;</span>        pIcmpHeader<span class="token operator">-></span>cksum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        pIcmpHeader<span class="token operator">-></span>cksum <span class="token operator">=</span> <span class="token function">GenerateChecksum</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span><span class="token operator">*</span><span class="token punctuation">)</span>IcmpSendBuf<span class="token punctuation">,</span> DEF_ICMP_PACK_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//生成校验位</span>        <span class="token comment" spellcheck="true">//记录序列号和当前时间</span>        stDecodeResult<span class="token punctuation">.</span>usSeqNo <span class="token operator">=</span> usSeqNo<span class="token punctuation">;</span>        stDecodeResult<span class="token punctuation">.</span>dwRoundTripTime <span class="token operator">=</span> <span class="token function">GetTickCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//发送ICMP的EchoRequest数据包</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sendto</span><span class="token punctuation">(</span>sockRaw<span class="token punctuation">,</span> IcmpSendBuf<span class="token punctuation">,</span> DEF_ICMP_PACK_SIZE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>SOCKADDR<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>destSockAddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>destSockAddr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> SOCKET_ERROR<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果目的主机不可达则直接退出</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">WSAGetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> WSAEHOSTUNREACH<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"目的主机不可达！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        SOCKADDR_IN from<span class="token punctuation">;</span>        <span class="token keyword">int</span> iFromLen <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> iReadLen<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义接收的数据包</span>        <span class="token keyword">char</span> IcmpRecvBuf<span class="token punctuation">[</span>MAX_ICMP_PACKET_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            iReadLen <span class="token operator">=</span> <span class="token function">recvfrom</span><span class="token punctuation">(</span>sockRaw<span class="token punctuation">,</span> IcmpRecvBuf<span class="token punctuation">,</span> MAX_ICMP_PACKET_SIZE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>SOCKADDR<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>from<span class="token punctuation">,</span> <span class="token operator">&amp;</span>iFromLen<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>iReadLen <span class="token operator">!=</span> SOCKET_ERROR<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">DecodeIcmpResponse_Ping</span><span class="token punctuation">(</span>IcmpRecvBuf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>IcmpRecvBuf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>stDecodeResult<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"来自 %s 的回复: 字节 = %d 时间 = %dms TTL = %d\n"</span><span class="token punctuation">,</span> <span class="token function">inet_ntoa</span><span class="token punctuation">(</span>stDecodeResult<span class="token punctuation">.</span>dwIPaddr<span class="token punctuation">)</span><span class="token punctuation">,</span>                        iReadLen <span class="token operator">-</span> <span class="token number">20</span><span class="token punctuation">,</span> stDecodeResult<span class="token punctuation">.</span>dwRoundTripTime<span class="token punctuation">,</span> stDecodeResult<span class="token punctuation">.</span>ttl<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">WSAGetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> WSAETIMEDOUT<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"time out !  *****\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"发生未知错误！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        usSeqNo<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//输出屏幕信息</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Ping complete...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">closesocket</span><span class="token punctuation">(</span>sockRaw<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">WSACleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span>  com<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> IP<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"command>>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s %s"</span><span class="token punctuation">,</span> com<span class="token punctuation">,</span> IP<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>com<span class="token punctuation">,</span> <span class="token string">"ping"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">Ping</span><span class="token punctuation">(</span>IP<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"command error ! \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>配置如下：</p><p><img src="/../images/2021-12-26-ping%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%AE%9E%E7%8E%B0/image-20211226143810548.png" alt="image-20211226143810548"></p><p><img src="/../images/2021-12-26-ping%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%AE%9E%E7%8E%B0/image-20211226143827352.png" alt="image-20211226143827352"></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ping程序的实现</title>
      <link href="/2021/12/26/2021-12-26-sdfdsfmd/"/>
      <url>/2021/12/26/2021-12-26-sdfdsfmd/</url>
      
        <content type="html"><![CDATA[<p>sdaadad</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试资料整理</title>
      <link href="/2021/12/01/mian-shi/mian-shi-zi-liao-zheng-li/"/>
      <url>/2021/12/01/mian-shi/mian-shi-zi-liao-zheng-li/</url>
      
        <content type="html"><![CDATA[<h1 id="面试资料整理"><a href="#面试资料整理" class="headerlink" title="面试资料整理"></a>面试资料整理</h1><p><a href="https://www.nowcoder.com/interview/center">牛客面试宝典（各种语言）</a> </p><p><a href="http://www.cyc2018.xyz/">CS-Notes</a> Github （java、数据库、数据结构、计算机基础）</p><p><a href="https://www.pdai.tech/">Java全栈知识体系</a> </p><p><a href="https://snailclimb.gitee.io/">JavaGuide</a> </p><p><a href="https://www.jianshu.com/u/c4503bc2c490">https://www.jianshu.com/u/c4503bc2c490</a> 简书</p><h2 id="优秀的Github"><a href="#优秀的Github" class="headerlink" title="优秀的Github"></a>优秀的Github</h2><p><a href="https://github.com/ZhongFuCheng3y/athena">https://github.com/ZhongFuCheng3y/athena</a> java3y的各种Java全套资料</p><h2 id="搜集到的网上资料，没看过"><a href="#搜集到的网上资料，没看过" class="headerlink" title="搜集到的网上资料，没看过"></a>搜集到的网上资料，没看过</h2><p>Java全能资料<br>链接：<a href="https://pan.baidu.com/s/1hEumFi1mR8nheRv_8NDelA">https://pan.baidu.com/s/1hEumFi1mR8nheRv_8NDelA</a><br>提取码：6666</p><p>Java<br>链接：<a href="https://pan.baidu.com/s/1zC8sH1BgVPLqI2aggFArwg">https://pan.baidu.com/s/1zC8sH1BgVPLqI2aggFArwg</a><br>提取码：82i9<br>复制这段内容后打开百度网盘手机App，操作更方便哦</p><p>Java后端面试必知必会-V2版</p><p>蓝奏云下载链接（推荐）：<a href="https://wws.lanzoui.com/iIi0Wtq3axg">https://wws.lanzoui.com/iIi0Wtq3axg</a></p><p>百度云链接: <a href="https://pan.baidu.com/s/1KdxGY-jaPnB9FCsJltsZPQ">https://pan.baidu.com/s/1KdxGY-jaPnB9FCsJltsZPQ</a> 提取码: fvwh</p><p>Java3y</p><p>链接: <a href="https://pan.baidu.com/s/1nEEvaZViRp_xyUYYQKT5Nw">https://pan.baidu.com/s/1nEEvaZViRp_xyUYYQKT5Nw</a> 提取码: 3wg2 复制这段内容后打开百度网盘手机App，操作更方便哦</p><p>【马士兵教育】价值21980的MCA Java互联网高级架构师视听课程：<a href="https://www.bilibili.com/video/BV1pZ4y1P7hr/">https://www.bilibili.com/video/BV1pZ4y1P7hr/</a></p><p>淘宝微服务架构演进之路，拆解40W阿里Java岗的微服务2大难题：<br><a href="https://www.bilibili.com/video/BV1zp4y1b7Vm/">https://www.bilibili.com/video/BV1zp4y1b7Vm/</a></p><p>（Spring、Spring Boot、jdk、mybatis）源码大全：<a href="https://www.bilibili.com/video/BV1Ab4y197eF/">https://www.bilibili.com/video/BV1Ab4y197eF/</a></p><p>金三银四面试突击教程：<a href="https://www.bilibili.com/video/BV1iN411Q7iH/">https://www.bilibili.com/video/BV1iN411Q7iH/</a></p><p>【马士兵 2021高程开发教程】多线程+高并发+jvm调优：<a href="https://www.bilibili.com/video/BV1jv411h7U6/">https://www.bilibili.com/video/BV1jv411h7U6/</a></p><p>【LeetCode算法刷题教程2021版】左神——左程云亲自下场带你刷爆BATJ高频算法面试题：<a href="https://www.bilibili.com/video/BV15D4y1X7Tt/">https://www.bilibili.com/video/BV15D4y1X7Tt/</a></p><p>2022届秋招Java后端高频知识点汇总①–Java基础：<br><a href="https://www.nowcoder.com/discuss/819297">https://www.nowcoder.com/discuss/819297</a><br>2022届秋招Java后端高频知识点汇总②–Java集合：<br><a href="https://www.nowcoder.com/discuss/819300">https://www.nowcoder.com/discuss/819300</a><br>2022届秋招Java后端高频知识点汇总③–多线程：<br><a href="https://www.nowcoder.com/discuss/819302">https://www.nowcoder.com/discuss/819302</a><br>2022届秋招Java后端高频知识点汇总④–Java中的锁：<br><a href="https://www.nowcoder.com/discuss/819304">https://www.nowcoder.com/discuss/819304</a><br>2022届秋招Java后端高频知识点汇总⑤–JVM：<br><a href="https://www.nowcoder.com/discuss/819307">https://www.nowcoder.com/discuss/819307</a><br>2022届秋招Java后端高频知识点汇总⑥–MySQL：<br><a href="https://www.nowcoder.com/discuss/819308">https://www.nowcoder.com/discuss/819308</a><br>2022届秋招Java后端高频知识点汇总⑦–Redis：<br><a href="https://www.nowcoder.com/discuss/819310">https://www.nowcoder.com/discuss/819310</a><br>2022届秋招Java后端高频知识点汇总⑧–计算机网络：<br><a href="https://www.nowcoder.com/discuss/819312">https://www.nowcoder.com/discuss/819312</a><br>2022届秋招Java后端高频知识点汇总⑨–操作系统：<br><a href="https://www.nowcoder.com/discuss/819316">https://www.nowcoder.com/discuss/819316</a><br>2022届秋招Java后端高频知识点汇总⑩–Spring：<br><a href="https://www.nowcoder.com/discuss/819319">https://www.nowcoder.com/discuss/819319</a></p><h1 id="参考经历"><a href="#参考经历" class="headerlink" title="参考经历"></a>参考经历</h1><p>作者：求offer😓😓😓😓<br>链接：<a href="https://www.nowcoder.com/discuss/764490?channel=666&amp;source_id=feed_index_nctrack">https://www.nowcoder.com/discuss/764490?channel=666&amp;source_id=feed_index_nctrack</a><br>来源：牛客网  </p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五指山(线性同余方程、扩展gcd)</title>
      <link href="/2021/11/30/2021-11-30-wu-zhi-shan-xian-xing-tong-yu-fang-cheng-kuo-zhan-gcd/"/>
      <url>/2021/11/30/2021-11-30-wu-zhi-shan-xian-xing-tong-yu-fang-cheng-kuo-zhan-gcd/</url>
      
        <content type="html"><![CDATA[<p>大圣在佛祖的手掌中。</p><p>我们假设佛祖的手掌是一个圆圈，圆圈的长为 n，逆时针记为：0,1,2,…,n−1，而大圣每次飞的距离为 d。</p><p>现在大圣所在的位置记为 x，而大圣想去的地方在 y。</p><p>要你告诉大圣至少要飞多少次才能到达目的地。</p><p>注意：孙悟空的筋斗云只沿着逆时针方向翻。</p><p>输入格式<br>有多组测试数据。</p><p>第一行是一个正整数 T，表示测试数据的组数；</p><p>每组测试数据包括一行，四个非负整数，分别为如来手掌圆圈的长度 n，筋斗所能飞的距离 d，大圣的初始位置 x 和大圣想去的地方 y。</p><p>输出格式<br>对于每组测试数据，输出一行，给出大圣最少要翻多少个筋斗云才能到达目的地。</p><p>如果无论翻多少个筋斗云也不能到达，输出 Impossible。</p><p>数据范围<br>2&lt;n&lt;10^9,<br>0&lt;d&lt;n,<br>0≤x,y&lt;n<br>输入样例：<br>2<br>3 2 0 2<br>3 2 0 1<br>输出样例：<br>1<br>2</p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>前置知识：</p><p><img src="/../images/2021-11-30-%E4%BA%94%E6%8C%87%E5%B1%B1(%E7%BA%BF%E6%80%A7%E5%90%8C%E4%BD%99%E6%96%B9%E7%A8%8B%E3%80%81%E6%89%A9%E5%B1%95gcd)/image-20211201224320410.png" alt="image-20211201224320410"></p><p>————————————————分割线————————————————</p><p>好了开始分析题意：</p><p>题目给出圆圈长为n，大圣飞的距离是d，从x到y</p><p>因此可得等式 </p><p>​      x + bd = y (mod n) </p><p>=&gt;  x + bd = y + an （a、b为未知数）</p><p>=&gt;  -an + bd = y - x </p><p>这个式子中，n、d、y、x都是常数</p><p>设 gcd (n,d) 意思是n和d的最大公约数</p><p>-an + bd =  gcd(n，d) 这个式子符合线性同余方程，使用拓展欧几里得算法可以求知一组解，然后我们判断 gcd(n,d) 是否可以整除 y-x ，可以整除左右两边就乘以$\frac{y-x}{gcd(n,d)}$ 得出a、b有解时的系数，b的含义为翻筋斗云的次数，要计算 b 的最小值，因为等式</p><p>ax+by=d的通解为</p><p>$\begin{cases}x_k=x+k<em>\frac {b} {gcd(a,b)}\y_k=y-k</em>\frac {a} {gcd(a,b)}\end{cases}$ ,所以 -an+bd = y-x 等式b的通解为</p><p>$b_k=b-k*\frac {n} {gcd(-n,d)}$ ,因此求最小值, b<del>min</del> = b mod $\frac {n} {gcd(-n,d)}$ </p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">exgcd</span><span class="token punctuation">(</span>LL a<span class="token punctuation">,</span>LL b<span class="token punctuation">,</span>LL <span class="token operator">&amp;</span>x<span class="token punctuation">,</span>LL <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token function">exgcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token operator">%</span>b<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    y <span class="token operator">-</span><span class="token operator">=</span> a<span class="token operator">/</span>b<span class="token operator">*</span>x<span class="token punctuation">;</span>    <span class="token keyword">return</span> d<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>     cin<span class="token operator">>></span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        LL n<span class="token punctuation">,</span>d<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>        cin<span class="token operator">>></span>n<span class="token operator">>></span>d<span class="token operator">>></span>x<span class="token operator">>></span>y<span class="token punctuation">;</span>        LL a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>        <span class="token keyword">int</span> gcd <span class="token operator">=</span> <span class="token function">exgcd</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>d<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>y<span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token operator">%</span>gcd<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            b <span class="token operator">*</span><span class="token operator">=</span> <span class="token punctuation">(</span>y<span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token operator">/</span>gcd<span class="token punctuation">;</span>            n <span class="token operator">/</span><span class="token operator">=</span> gcd<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span> b <span class="token operator">%</span> n <span class="token operator">+</span> n <span class="token punctuation">)</span> <span class="token operator">%</span> n <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Impossible"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模板题 </tag>
            
            <tag> 线性同余方程 </tag>
            
            <tag> 扩展gcd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java全栈知识体系笔记</title>
      <link href="/2021/11/29/mian-shi/java-quan-zhan-zhi-shi-ti-xi/"/>
      <url>/2021/11/29/mian-shi/java-quan-zhan-zhi-shi-ti-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="Java全栈知识体系笔记"><a href="#Java全栈知识体系笔记" class="headerlink" title="Java全栈知识体系笔记"></a>Java全栈知识体系笔记</h1><p><a href="https://www.pdai.tech/md/outline/x-outline.html">https://www.pdai.tech/md/outline/x-outline.html</a></p><h2 id="面向对象的三大特性"><a href="#面向对象的三大特性" class="headerlink" title="面向对象的三大特性"></a>面向对象的三大特性</h2><p>面向对象的三大特性：封装、继承、多态</p><p>封装：利用抽象数据结构将数据和基于数据的操作封装起来，使其构成一个不可分割的整体，尽可能的隐藏内部的细节，通过对外提供接口和外界进行交互，用户不必知道内部的细节，但可以通过对外的接口来访问该对象。</p><p>继承：一个类继承另一个类，将会继承父类中所有的属性和方法，如果是私有变量的话，子类会继承到但是无法直接访问。</p><blockquote><p>父类的引用指向子类的对象称为向上转型</p></blockquote><p>多态：分为运行时多态和编译时多态。</p><p>编译时多态主要指方法的重载</p><blockquote><p>重载，简单说，就是函数或者方法有相同的名称，但是参数列表不相同的情形，这样的同名不同参数的函数或者方法之间，互相称之为重载函数或者方法。</p></blockquote><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">namespace</span> OOP1<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 编译时的多态：方法的重载</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Overload</span>    <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">/// &lt;summary></span>       <span class="token comment" spellcheck="true">/// 方法的签名：包含方法的名字和参数（参数的数量和个数）</span>       <span class="token comment" spellcheck="true">/// &lt;/summary></span>       <span class="token comment" spellcheck="true">/// &lt;param name="a">&lt;/param></span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">DisplayOverload</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span>       <span class="token punctuation">{</span>           Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"DisplayOverload: "</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token comment" spellcheck="true">/// &lt;summary></span>       <span class="token comment" spellcheck="true">/// 方法的签名：包含方法的名字和参数（参数的数量和个数）</span>       <span class="token comment" spellcheck="true">/// &lt;/summary></span>       <span class="token comment" spellcheck="true">/// &lt;param name="a">&lt;/param></span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">DisplayOverload</span><span class="token punctuation">(</span>string a<span class="token punctuation">)</span>       <span class="token punctuation">{</span>           Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"DisplayOverload: "</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token comment" spellcheck="true">/// &lt;summary></span>       <span class="token comment" spellcheck="true">/// 方法的签名：包含方法的名字和参数（参数的数量和个数）</span>       <span class="token comment" spellcheck="true">/// &lt;/summary></span>       <span class="token comment" spellcheck="true">/// &lt;param name="a">&lt;/param></span>       <span class="token comment" spellcheck="true">/// &lt;param name="b">&lt;/param></span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">DisplayOverload</span><span class="token punctuation">(</span>string a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>       <span class="token punctuation">{</span>           Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"DisplayOverload: "</span><span class="token operator">+</span>a <span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行时多态：是指对象的引用所指向的具体类型只有在运行时才能确定。</p><p>运行时多态有三个条件：</p><ul><li>继承</li><li>重写</li><li>向上转型</li></ul><h2 id="Java基础知识点"><a href="#Java基础知识点" class="headerlink" title="Java基础知识点"></a>Java基础知识点</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>数据类型：八大基本数据类型，每个基本数据类型都有对应的包装类</p><p>boolean、byte、short、int、long、float、double、char</p><p>缓存池：int的缓存池大小是 -127~128</p><p>在这个范围内，使用</p><pre class=" language-cpp"><code class="language-cpp">Integer a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> Integer b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>a <span class="token operator">==</span> <span class="token function">b</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    Integer c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Integer</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Integer d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Integer</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c <span class="token operator">==</span> <span class="token function">d</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span></code></pre><p>使用Integer a = 2; 会从缓存池中找到这个值</p><h3 id="String、StringBuffer、StringBuilder"><a href="#String、StringBuffer、StringBuilder" class="headerlink" title="String、StringBuffer、StringBuilder"></a>String、StringBuffer、StringBuilder</h3><p>String 不可变，每次new String(“123”)会重新创建一个对象，用字符串直接赋值会从字符串常量池中找是否有相同的对象赋值给它</p><p>StringBuffer可变，是线程安全的，内部使用 synchronized 进行同步</p><p>StringBuilder可变，不是线程安全的</p><p>String.intern() 可以把某个String对象放到字符串常量池中，并返回他的引用</p><h3 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h3><h4 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h4><p>Java中参数的传递是值传递，而不是引用传递。</p><p>一个对象的引用作为方法的参数传递时，传递的是对象引用的一个拷贝，因此如果在方法内部改变这个对象引用指向的对象的字段值可以改变原对象，但是如果改变对象引用指向的对象，对原来的对象引用没有影响</p><p>java中隐式类型转换不能向下转型，必须显式的声明</p><p>switch中不能选择long类型</p><p><a href="https://www.cnblogs.com/jfl-xx/p/12369647.html">java对象与对象引用 </a> </p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ul><li><p>抽象类不可被实例化，他的方法可以是没有实现的抽象的方法，也可以有实现的方法。</p></li><li><p>在java8之前，接口可以看做是完全抽象的类，没有任何的方法的实现。但是在java8以后接口中也可以定义实现的方法和字段。方法是public、字段是public static final</p></li><li><p>super可以调用父类的构造方法完成父类的初始化操作</p></li><li><p>重写：基于子类继承了父类，而子类中重写了从父类中继承过来的某个方法</p></li></ul><p>方法名、参数类型、参数顺序完全相同，修饰符的范围子类可以扩大但不能缩小</p><ul><li>重载：一个类中方法名相同但是参数类型、参数个数、参数顺序有一个不同，不能只以返回值类型不同来重载。</li></ul><h3 id="Object通用方法"><a href="#Object通用方法" class="headerlink" title="Object通用方法"></a>Object通用方法</h3><p>包装类型中，equals 比较对象的值是否相同，== 比较对象地址是否相同</p><p>hashCode（）方法可以返回某个对象的哈希值，这个哈希值用来区别不同的对象</p><p>toString（）、clone（）</p><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p>final可以修饰变量、方法</p><p>修饰变量的话，这个变量只能被赋值一次后就不能更改了</p><p>修饰方法的话，这个方法无法被子类覆盖（重写）</p><p>static修饰变量，这个变量属于这个类，这个类实例化后的所有对象都共享这一个static变量</p><p>static修饰方法，这个方法属于这个类，static类中只能使用静态变量和方法、不能使用非静态的</p><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><p>Java反射机制是指在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法，对于任意一个对象，都能调用他的任意一个方法和属性；这种动态获取信息以及动态调用对象的方法成为Java语言的反射机制。</p><p>反射可以提供运行时的类信息，并且这个类可以在运行时才加载进来，甚至在编译时期该类的 .class 不存在也可以加载进来。</p><p>一般我们的对象的类型在编译期间就已经确定了，我们可以通过反射机制直接创建对象，即使这个对象的类型在编译期是未知的。</p><p>Java反射提供的功能：</p><ul><li>在运行时判断一个对象属于哪个类</li><li>在运行时构造任意一个类的对象</li><li>在运行时判断某个类中的所有属性和方法（甚至是private方法）</li><li>在运行时调用任意一个对象的方法</li></ul><p>反射的基本应用：</p><ul><li>获取Class对象</li><li>判断是否为某个类的实例</li><li>创建实例</li><li>获取某个Class对象的方法</li><li>获取构造器信息</li><li>获取类的成员变量</li><li>invoke调用方法</li><li>利用反射创建数组</li></ul><h3 id="Java-与-C-的区别"><a href="#Java-与-C-的区别" class="headerlink" title="Java 与 C++ 的区别"></a>Java 与 C++ 的区别</h3><ul><li>Java 是纯粹的面向对象语言，所有的对象都继承自 java.lang.Object，C++ 为了兼容 C 即支持面向对象也支持面向过程。</li><li>Java 通过虚拟机从而实现跨平台特性，但是 C++ 依赖于特定的平台。</li><li>Java 没有指针，它的引用可以理解为安全指针，而 C++ 具有和 C 一样的指针。</li><li>Java 支持自动垃圾回收，而 C++ 需要手动回收。</li><li>Java 不支持多重继承，只能通过实现多个接口来达到相同目的，而 C++ 支持多重继承。</li><li>Java 不支持操作符重载，虽然可以对两个 String 对象支持加法运算，但是这是语言内置支持的操作，不属于操作符重载，而 C++ 可以。</li><li>Java 的 goto 是保留字，但是不可用，C++ 可以使用 goto。</li><li>Java 不支持条件编译，C++ 通过 #ifdef #ifndef 等预处理命令从而实现条件编译。</li></ul><h3 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h3><p>try..with…rource 可以自动的关闭一些在try中创建的变量</p><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><ul><li><p>泛型的本质是为了参数化类型，在不创建新类型的情况下，通过泛型指定不同类型来控制形参具体限制的类型。在泛型的使用过程中，操作的数据类型指定为一个参数，这种参数类型可以使用在接口、方法、类上，称为泛型接口、泛型方法、泛型类。</p></li><li><p>引入泛型的意义：适用于多种数据类型执行相同的代码。（代码复用）</p></li><li><p>泛型类、泛型接口、泛型方法</p></li><li><p>使用&lt;? extends E&gt; 指定泛型的上限，使用&lt;? super E&gt; 指定泛型的下限</p></li><li><p>如何理解java中的泛型是伪泛型</p></li></ul><p>泛型是jdk1.5加入的，java语法上支持泛型，但是在编译时会擦除所有的泛型，“类型擦除”会替换所有的泛型为具体的类型。</p><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><p>注解用于对代码进行说明，可以对类、方法、字段、方法参数、局部变量等进行注解。他的作用：生成文档、编译检查、编译时动态处理、运行时动态处理。</p><p>注解的分类：</p><ul><li><p>Java中自带的标准注解：@Override、@Deprecated、@SuppressWarnings；元注解：</p></li><li><p>元注解：用于定义注解的注解。包括@Document、@Target、@Retention、@Inherited。Java8中新增 @Repeatable、@Native</p></li><li><p>自定义注解</p></li></ul><p>元注解详细解释：</p><p>@Target 标明注解使用的范围,参数如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> ElementType <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/** Class, interface (including annotation type), or enum declaration */</span>    TYPE<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** Field declaration (includes enum constants) */</span>    FIELD<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** Method declaration */</span>    METHOD<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** Formal parameter declaration */</span>    PARAMETER<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** Constructor declaration */</span>    CONSTRUCTOR<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** Local variable declaration */</span>    LOCAL_VARIABLE<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** Annotation type declaration */</span>    ANNOTATION_TYPE<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** Package declaration */</span>    PACKAGE<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * Type parameter declaration     *     * @since 1.8     */</span>    TYPE_PARAMETER<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * Use of a type     *     * @since 1.8     */</span>    TYPE_USE<span class="token punctuation">}</span></code></pre><p>@Retetion用于标明注解被保留的阶段，参数如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> RetentionPolicy <span class="token punctuation">{</span>     SOURCE<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 源文件保留</span>    CLASS<span class="token punctuation">,</span>       <span class="token comment" spellcheck="true">// 编译期保留，默认值</span>    RUNTIME   <span class="token comment" spellcheck="true">// 运行期保留，可通过反射去获取注解信息</span><span class="token punctuation">}</span></code></pre><p>注解不支持继承，但是如果某个类使用了被@Inherited修饰的注解，会让这个类的子类自动拥有这个注解</p><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><ul><li><p>异常是指程序运行中出现的各种状况，Java中通过Throwable的各种子类描述不同的异常。Throwable是Java中所有错误和异常的超类，他有两个子类 Error、Exception，用来指示发生了异常情况。</p></li><li><p>Error类及其子类：程序中无法处理的错误，表示应用程序出现了严重的错误。</p></li><li><p>Exception类及其子类：分为运行时异常和编译时异常。</p><p>编译时异常必须在编写代码中解决，要么用try catch捕获要么用throw抛出</p><p>运行时异常通常是由逻辑错误，算术问题引出，编译器无法识别，只能在编写中尽量避免逻辑错误。</p></li><li><p>异常可以自定义，自定义时需要继承Exception类。</p></li><li><p>异常分为可查的异常和不可查的异常。可查的异常包括编译时异常，不可查的异常包括运行时异常和Error错误，对于可查的异常必须进行处理try catch或者throw抛出</p></li><li><p>throws用来声明一个异常，告知方法调用者可能出现的异常。throw用来抛出一个异常（自己解决不了，抛出给上层）</p></li></ul><h3 id="Java类加载机制"><a href="#Java类加载机制" class="headerlink" title="Java类加载机制"></a>Java类加载机制</h3><p>Java类加载主要有：加载、验证、准备、解析、初始化五个过程，加载、验证、准备、初始化是按顺序开始的，解析则不一定</p><p>类的加载：查找并加载类的二进制数据。</p><h3 id="反射-1"><a href="#反射-1" class="headerlink" title="反射"></a>反射</h3><h2 id="Java集合框架"><a href="#Java集合框架" class="headerlink" title="Java集合框架"></a>Java集合框架</h2><p>Collection容器主要包括Collection和Map两种，Collection存储着对象的集合，而Map存储着键值对。</p><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>TreeSet、HashSet、LinkedHashSet</p><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>ArrayList、Vector、LinkedList</p><h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><p>LinkedList</p><p>PriorityQueue</p><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>TreeMap、HashMap、HashTable、LinkedHashMap</p><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><ul><li><p>多线程的出现是要解决什么问题的?</p><p>CPU、内存、I/O设备的速度是有极大的差异的，为了合理利用CPU的性能，平衡这三者的速度差异。</p></li><li><p>线程不安全是指什么? 举例说明</p><p>如果多个线程对同一个共享数据进行访问而不采取同步操作的话，那么操作的结果是不一致的。</p></li><li><p>并发出现线程不安全的本质什么? </p><p>可见性，原子性和有序性。</p><p>可见性：CPU缓存引起</p><p>int i = 0; </p><p>i = 10;</p><p>j = i;</p><p>原子性：（分时复用引起）</p><p>一个操作或多个操作，要么不执行，要么全部执行，并且过程中不能被任何因素打断。</p><p>转账问题</p><p>有序性：重排序引起</p><p>即程序执行的顺序按照代码的先后顺序执行。</p></li></ul><ul><li><p>Java是怎么解决并发问题的? 3个关键字，JMM和8个Happens-Before</p><p>三个关键字：volatile、synchronized、final</p><p>Happens-Before规则</p><p>原子性：Java内存模型只保证了基本读取和赋值是原子性操作</p><p>可见性：volatile关键字可以保证可见性，变量被volatile修饰时，有其他线程需要读取时，他会保证修改的值立即被更新到主存，他会去从内存中读取新值。</p><p>而普通的共享变量不能保证可见性，因为普通变量被修改后，什么时候被写入主存是不确定的，当其他线程读取时，很有可能读取到的是旧值。</p><p>synchronized可以保证同一时刻只有一个线程获取锁，然后执行同步代码，并且在释放锁之前会将更新的值写入主存，从而保证其可见性。</p><p>有序性：volatile、synchronize</p></li></ul><p>线程安全是不是非真即假? 不是</p><p>线程安全有哪些实现思路?</p><p>如何理解并发和并行的区别?</p><h3 id="Synchronized"><a href="#Synchronized" class="headerlink" title="Synchronized"></a>Synchronized</h3><ul><li>Synchronized可以作用在哪里? 分别通过对象锁和类锁进行举例。</li></ul><p>方法、对象。</p><p>对象锁：包括方法锁和同步代码块锁。</p><ul><li><p>Synchronized本质上是通过什么保证线程安全的? 分三个方面回答：加锁和释放锁的原理，可重入原理，保证可见性原理。</p></li><li><p>Synchronized由什么样的缺陷?  Java Lock是怎么弥补这些缺陷的。</p></li></ul><p>Synchronized和Lock的对比，和选择?</p><p>Synchronized在使用时有何注意事项?</p><p>Synchronized修饰的方法在抛出异常时,会释放锁吗?</p><p>多个线程等待同一个snchronized锁的时候，JVM如何选择下一个获取锁的线程?</p><p>Synchronized使得同时只有一个线程可以执行，性能比较差，有什么提升的方法?</p><p>我想更加灵活地控制锁的释放和获取(现在释放锁和获取锁的时机都被规定死了)，怎么办?</p><p>什么是锁的升级和降级? 什么是JVM里的偏斜锁、轻量级锁、重量级锁?</p><p>不同的JDK中对Synchronized有何优化?</p><h3 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h3><p>线程之间的通信机制有两种：共享内存和消息传递。</p><h3 id="线程-1"><a href="#线程-1" class="headerlink" title="线程"></a>线程</h3><ul><li>线程有哪几种状态? 分别说明从一种状态到另一种状态转变有哪些方式?</li></ul><p>初始、就绪、执行、等待、终止</p><p>通常线程有哪几种使用方式?</p><p>基础线程机制有哪些?</p><p>线程的中断方式有哪些?</p><p>线程的互斥同步方式有哪些? 如何比较和选择?</p><p>线程之间有哪些协作方式?</p><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><p>著作权归<a href="https://pdai.tech所有./">https://pdai.tech所有。</a> 链接：<a href="https://www.pdai.tech/md/java/basic/java-basic-lan-basic.html">https://www.pdai.tech/md/java/basic/java-basic-lan-basic.html</a></p><h1 id="复习专栏"><a href="#复习专栏" class="headerlink" title="复习专栏"></a>复习专栏</h1><h3 id="Day2复习-纯手敲"><a href="#Day2复习-纯手敲" class="headerlink" title="Day2复习(纯手敲)"></a>Day2复习(纯手敲)</h3><p><strong>面向对象三大特性：封装、继承、多态</strong></p><p>封装：用抽象的数据类型把数据和操作数据的方法封装在一起，形成一个整体，通过对外的接口与外部联系，这样用户不必知道内部的细节，但可以通过对象对外提供的接口来访问该对象。</p><p>优点：减少耦合，可以独立的开发测试；减轻维护的负担，更容易被程序员理解；</p><p>提高代码的重用性。</p><p>继承：一个类可以继承另一个类从而获得他的属性和方法。java只支持单继承，但可以实现多个接口</p><p>多态：分为运行时多态和编译时多态</p><p>编译时多态指的是方法的重载，方法名相同，参数的类型、个数、顺序不同</p><p>运行时多态指的是：程序中定义的对象引用所指向的具体类型在运行时才确定。</p><p>父类的引用可以指向子类的对象，叫做向上转型。</p><p>运行时多态的条件：继承、向上转型、覆盖</p><p><strong>Java基础知识</strong></p><p>java有八种基本类型，boolean、byte、short、int、long、double、float、char</p><p>每种都有其对应的包装类，包装类可以自动装箱拆箱。如 Integer i = 1;</p><p>Integer的缓存池大小为 -128~127 ，在这个范围内，Integer包装类在赋值的时候会检查缓存池有没有相同的值。</p><p><strong>String、StringBuffer、StringBuilder</strong></p><p>String长度不可变，使用new String（）必定会创建一个新对象在堆里面，而如果使用字符串赋值的方式，字符串会检查字符串常量池，如果没有会放入，如果有会返回常量池中的地址。</p><p>StringBuffer可变、StringBuilder可变。两者的区别是StringBuffer是线程安全的，其中加了锁，StringBuilder不是线程安全的</p><p>String.intern()函数可以将字符串值放入常量池并返回这个字符串的一个引用</p><p><strong>运算</strong></p><p>Java不支持向下的隐式转换，比如double型的数据不能直接赋值给float。</p><p>当采用运算符计算时，java会自动将类型提升进行运算，比如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">byte</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">byte</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> 会报错，因为两个<span class="token keyword">byte</span>被提升为<span class="token keyword">int</span>型</code></pre><p>byte、short会被提升为int，float和double运算会被提升为double</p><p>？继承的访问权限：如果修饰为private则子类无法访问，protected则子类可以访问，</p><p>public所有类都可以访问</p><p><strong>抽象类</strong>是具有抽象方法的类，不可实例化，接口是全部为抽象方法的类，是抽象类的特例。jdk1.8开始接口中可以定义一些默认的已经实现的方法</p><p>super用来调用父类的构造函数帮助对子类进行初始化操作。</p><p><strong>重写和重载：</strong></p><p>重写指的是在继承中，子类重写了父类中已经有的一个方法，方法名、参数完全和父类中的方法相同。</p><p>重载指的是在同一个类中，一些方法名相同，但是参数个数、参数类型、参数顺便不尽相同的方法，他们是对这个方法的重载。</p><p><strong>Object的方法</strong></p><p>Object中hashCode返回一个哈希值</p><p>equals比较的是两个对象是否相同，== 比较的是对象引用的地址是否相同。</p><p>final修饰过的属性只能被赋值一次后，就不能再改变了。修饰过的方法不可被重写（覆盖）</p><p>static修饰变量，这个变量属于这个类，在类加载时初始化，被这个类实例化出来的所有对象共享。static修饰方法，称为静态方法，静态方法中不能使用类中定义的非静态的方法和变量</p><p><strong>反射</strong>：反射指的是Java在运行时可以获取自身类的信息</p><p>泛型：泛型的本质是为了参数化类型（在不创建新的类型的情况下，通过泛型指定的不同类型来控制形参具体限制的类型）。也就是说在泛型使用过程中，操作的数据类型被指定为一个参数，这种参数可以用在类、接口、方法中，分别被称为泛型类、泛型接口、泛型方法。</p><p>引入泛型的意义：适用于多种数据类型执行相同的代码；泛型的类型在使用时指定，不需要强制转换（它是类型安全的，编译器会检查类型）</p><p>Java泛型这个特性是从JDK1.5加入的，    Java在语法上支持泛型，但是在编译阶段会进行“<strong>类型擦除</strong>”，所有的泛型表示都会被替换为具体的类型，就像完全没有泛型一样。</p><h3 id="Day3复习"><a href="#Day3复习" class="headerlink" title="Day3复习"></a>Day3复习</h3><p>Java面向对象的三大特性：封装、继承、多态</p><p>封装：用抽象数据类型将数据和基于数据的操作封装在一起，尽可能的隐藏内部的信息，通过对外的接口和外界联系，用户无需知道内部的细节，只需要通过对外的接口和这个对象发生联系。</p><p>继承：一个类可以继承另一个类获取他所有的属性和方法。父类引用指向子类的对象叫做<strong>向上转型</strong></p><p>多态：包括运行时多态和编译时多态。编译时多态主要指重载。方法的重载指的是方法名相同，但是参数类型、参数个数、参数顺序有一个不同。</p><p>运行时多态指的是父类的引用指向的对象在运行时才能确定。运行时多态发生的条件有：继承、重写、向上转型。</p><hr><p>final可以修饰变量、方法、类</p><p>修饰变量，这个变量如果是基本数据类型，则这个变量的值只能赋值一次，之后不能改变，如果是引用，那么不能修改这个引用指向其他的对象，但是指向的对象本身可以修改。</p><p>修饰方法，这个方法不能被覆盖。</p><p>修饰类，这个类不能被继承。</p><p>反射：反射可以在运行时获取任何类的属性和方法，这个类可以在运行时才加载进来，可以使用Class.forName(“”)的形式控制类的加载。</p><p>反射的应用：1.可以判断某个对象是否是某个类2.可以获取某个类的属性和方法</p><p>注解：注解主要用来做一些配置和标记的作用</p><p>泛型：泛型是jdk1.5引入的，Java语法上支持泛型，但是在编译时会进行类型擦除，将&lt;&gt;中的泛型替换成具体的类型，和没有泛型一样。</p><p>Java和C++的区别：</p><ul><li>Java是面向对象的语言，所有类都继承Object类。C++为了兼容c，即是面向对象，也支持面向过程。</li><li>Java程序编译后生成的字节码在JVM虚拟机上运行，因此具有跨平台的性质，而C++不能跨平台</li><li>Java具有垃圾回收机制，可以自动回收不再使用的内存。而C++需要手动释放空间。</li><li>Java不支持多继承，只能采用实现多个接口来实现这个功能，c++支持多继承</li><li>Java中goto是保留字但不能使用，C++可以试用goto</li><li>Java不支持条件编译，C++支持条件编译</li><li>Java不支持操作符的重载，c++可以</li><li>Java 没有指针，它的引用可以理解为安全指针，而 C++ 具有和 C 一样的指针。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaGuide阅读笔记</title>
      <link href="/2021/11/28/mian-shi/javaguide-yue-du-bi-ji/"/>
      <url>/2021/11/28/mian-shi/javaguide-yue-du-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaGuide阅读笔记"><a href="#JavaGuide阅读笔记" class="headerlink" title="JavaGuide阅读笔记"></a>JavaGuide阅读笔记</h1><p>1.面向对象和面向过程的区别</p><p>进程和线程：</p><p>进程是对一个程序的抽象，进程的创建和销毁就是一个程序的开始和结束。</p><p>进程是资源调度的最小单位，一个进程可以有多个线程。</p><p>进程进行上下文切换较慢，而线程进行切换很快。</p><blockquote><p>进程是程序的一次执行过程，是系统运行程序的基本单位，系统运行一个程序就是一个进程从创建，运行到消亡的过程。</p><p>在java中，当我们启动main函数时，就是启动了一个JVM的进程，而main函数所在的线程就是这个进程的一个线程，也成为主线程</p></blockquote><blockquote><p>线程是一个比进程更小的执行单位。一个进程在执行的过程中可以产生多个线程，同类的多个线程共享进程的堆和方法区，但每个线程有自己的程序计数器、虚拟机栈、本地方法栈，系统在产生一个线程，或者在多个线程之间切换工作时，负担比进程要少，线程可以称为轻量级的进程</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法笔记（长期更新）</title>
      <link href="/2021/11/26/suan-fa-bi-ji/"/>
      <url>/2021/11/26/suan-fa-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="算法学习目录"><a href="#算法学习目录" class="headerlink" title="算法学习目录"></a>算法学习目录</h1><p>时空复杂度分析</p><p>基础算法 </p><blockquote><p>排序<br>二分<br>高精度<br>前缀和与差分<br>双指针算法<br>位运算<br>离散化<br>区间合并</p></blockquote><p>数据结构</p><blockquote><p>链表与邻接表：树与图的存储<br>栈与队列：单调队列、单调栈<br>kmp<br>Trie<br>并查集<br>堆<br>Hash表</p><p>树状数组</p><p>线段树</p></blockquote><p>搜索与图论 </p><blockquote><p>DFS与BFS<br>树与图的遍历：拓扑排序<br>最短路<br>最小生成树<br>二分图：染色法、匈牙利算法</p></blockquote><p>数学知识 </p><blockquote><p>质数<br>约数<br>欧拉函数<br>快速幂<br>扩展欧几里得算法<br>中国剩余定理<br>高斯消元<br>组合计数<br>容斥原理<br>简单博弈论</p></blockquote><p>动态规划</p><blockquote><p>背包问题<br>线性DP<br>区间DP<br>计数类DP<br>数位统计DP<br>状态压缩DP<br>树形DP<br>记忆化搜索</p></blockquote><p>贪心</p><h1 id="时间复杂度和算法的选择"><a href="#时间复杂度和算法的选择" class="headerlink" title="时间复杂度和算法的选择"></a>时间复杂度和算法的选择</h1><p><img src="/../images/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/Pasted%20image%2020211025132736.png" alt="Pasted image 20211025132736"></p><h1 id="学习网站或资料"><a href="#学习网站或资料" class="headerlink" title="学习网站或资料"></a>学习网站或资料</h1><p><a href="https://zhuanlan.zhihu.com/p/105467597">知乎算法专栏 </a>  </p><h1 id="基础算法"><a href="#基础算法" class="headerlink" title="基础算法"></a>基础算法</h1><h2 id="归并排序模板"><a href="#归并排序模板" class="headerlink" title="归并排序模板"></a>归并排序模板</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//归并排序</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>tmp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">>=</span>r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">merge_sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">merge_sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token operator">=</span>l<span class="token punctuation">,</span>j<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>mid <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            tmp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>             tmp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span> tmp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span> tmp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>l<span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>r<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">,</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="快速排序模板"><a href="#快速排序模板" class="headerlink" title="快速排序模板"></a>快速排序模板</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">>=</span>r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token number">-1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> x <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">do</span> i<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">do</span> j<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token function">quick_sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>l<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">quick_sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h2><h3 id="树状数组原理"><a href="#树状数组原理" class="headerlink" title="树状数组原理"></a>树状数组原理</h3><p><img src="/../images/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/7416_68861e9035-31e23bc7b41ec145edb45cee8b55855-1636690330918.png" alt="31e23bc7b41ec145edb45cee8b55855.png"></p><p>1、lowbit(x):返回x的最后一位1</p><p>2、add(x,v):在x位置加上v，并将后面相关联的位置也加上v</p><p>3、query(x):询问x的前缀和</p><p>时间复杂度 $O(logn)$</p><h3 id="树状数组模板"><a href="#树状数组模板" class="headerlink" title="树状数组模板"></a>树状数组模板</h3><pre class=" language-c++"><code class="language-c++">const int N = 100005;int a[N],tree[N];int n,m;int lowbit(int x){    return x & (-x);}void update(int pos,int v){    for(int i=pos; i<N; i+=lowbit(i))    {        tree[i] += v;    }}int query(int n){    int ans = 0;    for(int pos=n; pos>0; pos-=lowbit(pos)) ans += tree[pos];    return ans;}int query(int a,int b){    return query(b) - query(a-1);}</code></pre><p>例题：<a href="https://www.acwing.com/problem/content/1266/">1264. 动态求连续区间和</a></p><h2 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h2><p>参见文章：<a href="https://gjwhhhh.github.io/2021/11/12/2021-11-12-xian-duan-shu/">线段树</a> </p><h2 id="树和图的存储"><a href="#树和图的存储" class="headerlink" title="树和图的存储"></a>树和图的存储</h2><p>（数组建立邻接表）</p><h3 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>N <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>N <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//初始化</span><span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h1><h2 id="最短路知识结构"><a href="#最短路知识结构" class="headerlink" title="最短路知识结构"></a>最短路知识结构</h2><p><img src="/../images/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/image-20211207195106222.png" alt="image-20211207195106222"></p><h3 id="Dijkstra算法-迪杰斯特拉算法"><a href="#Dijkstra算法-迪杰斯特拉算法" class="headerlink" title="Dijkstra算法(迪杰斯特拉算法)"></a>Dijkstra算法(迪杰斯特拉算法)</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">510</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dist<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> dist<span class="token punctuation">)</span><span class="token punctuation">;</span>    dist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token number">-1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>t<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">||</span>dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">></span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                t <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>            dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">+</span>g<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        st<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> dist<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> g<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">--</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="堆优化版的dijkstra-算法"><a href="#堆优化版的dijkstra-算法" class="headerlink" title="堆优化版的dijkstra()算法"></a>堆优化版的dijkstra()算法</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> PII<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>idx<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>    w<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">,</span> e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> dist<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> dist<span class="token punctuation">)</span><span class="token punctuation">;</span>    dist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    priority_queue<span class="token operator">&lt;</span>PII<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span>PII<span class="token operator">></span><span class="token punctuation">,</span>greater<span class="token operator">&lt;</span>PII<span class="token operator">></span> <span class="token operator">></span> heap<span class="token punctuation">;</span>    heap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>heap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">auto</span> t <span class="token operator">=</span> heap<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> heap<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ver <span class="token operator">=</span> t<span class="token punctuation">.</span>second<span class="token punctuation">,</span> distance <span class="token operator">=</span> t<span class="token punctuation">.</span>first<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>ver<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        st<span class="token punctuation">[</span>ver<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h<span class="token punctuation">[</span>ver<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">=</span>ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> dist<span class="token punctuation">[</span>ver<span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>ver<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                heap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>j<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> dist<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="bellman-ford-算法"><a href="#bellman-ford-算法" class="headerlink" title="bellman_ford()算法"></a>bellman_ford()算法</h3><p>证明：<a href="https://www.jianshu.com/p/b876fe9b2338">https://www.jianshu.com/p/b876fe9b2338</a></p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">505</span><span class="token punctuation">,</span> M <span class="token operator">=</span> <span class="token number">10010</span><span class="token punctuation">;</span><span class="token keyword">struct</span> Edge<span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span><span class="token punctuation">}</span>edges<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">,</span>k<span class="token punctuation">,</span>dist<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>last<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">bellman_ford</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> dist<span class="token punctuation">)</span><span class="token punctuation">;</span>    dist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>k<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">memcpy</span><span class="token punctuation">(</span>last<span class="token punctuation">,</span>dist<span class="token punctuation">,</span><span class="token keyword">sizeof</span> dist<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>m<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">auto</span> e <span class="token operator">=</span> edges<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            dist<span class="token punctuation">[</span>e<span class="token punctuation">.</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>e<span class="token punctuation">.</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span>last<span class="token punctuation">[</span>e<span class="token punctuation">.</span>a<span class="token punctuation">]</span><span class="token operator">+</span>e<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0x3f3f3f3f</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> dist<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token function">bellman_ford</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token operator">==</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"impossible"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="spfa算法"><a href="#spfa算法" class="headerlink" title="spfa算法"></a>spfa算法</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>idx<span class="token punctuation">,</span>ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dist<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> w<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">spfa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> dist<span class="token punctuation">)</span><span class="token punctuation">;</span>    dist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    st<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        st<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">=</span>ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                    st<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dist<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">--</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token function">spfa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"impossible"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="spfa算法判断是否有负环"><a href="#spfa算法判断是否有负环" class="headerlink" title="spfa算法判断是否有负环"></a>spfa算法判断是否有负环</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">2005</span><span class="token punctuation">,</span>M<span class="token operator">=</span><span class="token number">10005</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">,</span> w<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>    w<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">,</span> e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> dist<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>cnt<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// bool st[N];</span><span class="token keyword">bool</span> <span class="token function">spfa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>dist<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// st[t] =false;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">=</span>ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                cnt<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> cnt<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">>=</span>n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// if(!st[j]){</span>                    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// st[j] = true;</span>                <span class="token comment" spellcheck="true">// }</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">spfa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"No"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="Floyd算法"><a href="#Floyd算法" class="headerlink" title="Floyd算法"></a>Floyd算法</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">floyd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>                d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="数论"><a href="#数论" class="headerlink" title="数论"></a>数论</h1><h2 id="约数"><a href="#约数" class="headerlink" title="约数"></a>约数</h2><h3 id="约数个数定理和约数和定理"><a href="#约数个数定理和约数和定理" class="headerlink" title="约数个数定理和约数和定理"></a>约数个数定理和约数和定理</h3><p>约数个数定理可以计算出一个数约数的个数，在小学奥数与中学竞赛中大有用处。<br><strong>定理</strong></p><p>对于一个大于1正整数n可以分解质因数<br><img src="https://bkimg.cdn.bcebos.com/formula/afef3bf76b93359a0067ea80e57bca0e.svg"><br>则n的正约数的个数就是<br><img src="https://bkimg.cdn.bcebos.com/formula/21c38a03ef417a187c0a202b37ce59c4.svg"><br>n的(a₁+1)(a₂+1)(a₃+1)…(ak+1)个==正约数的和==为<br>$f(n)=(p_1^0+p_1^1+p_1^2+…p_1^{a_1})(p_2^0+p_2^1+p_2^2+…p_2^{a_2})…(p_k^0+p_k^1+p_k^2+…p_k^{a_k}）$<br>其中a1、a2、a3…ak是p1、p2、p3，…pk的指数。</p><p>例题：<br><a href="https://www.acwing.com/problem/content/872/">https://www.acwing.com/problem/content/872/</a><br><a href="https://www.acwing.com/problem/content/873/">https://www.acwing.com/problem/content/873/</a></p><p><strong>定理简证</strong></p><blockquote><p>首先同上，n可以分解质因数<br><img src="https://bkimg.cdn.bcebos.com/formula/7acc0c37dfea06c873d081dba44b2164.svg"><br>,由约数定义可知<img src="https://bkimg.cdn.bcebos.com/formula/5adc97925b2a202ae652c47147bd9565.svg">的约数有:$p_1^0$, $p_1^1$, $p_1^2$, …,$p_1^{a_1}$ ，共（$a_1$+1）个；同理<img src="https://bkimg.cdn.bcebos.com/formula/9fd88732dffebe323c5841e80f128673.svg">的约数有（$a_2$+1）个；……；<img src="https://bkimg.cdn.bcebos.com/formula/b6bf84713818784c31d704004f07a9da.svg">的约数有（$a_k$+1）个。<br>故根据乘法原理：==n的约数的个数==就是(a1+1)(a2+1)(a3+1)…(ak+1)。<br>n的(a₁+1)(a₂+1)(a₃+1)…(ak+1)个==正约数的和==为</p></blockquote><p>$f(n)=(p_1^0+p_1^1+p_1^2+…p_1^{a_1})(p_2^0+p_2^1+p_2^2+…p_2^{a_2})…(p_k^0+p_k^1+p_k^2+…p_k^{a_k}）$</p><h2 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h2><p>欧拉函数的定义</p><blockquote><p>1∼N 中与 N 互质的数的个数被称为欧拉函数，记为 ϕ(N)。<br>若在算数基本定理中，$N=p^{a_1}_1p^{a_2}_2…p^{a_m}_m$，则：<br>$ϕ(N) = N×\frac{p1−1}{p1}×\frac{p2−1}{p2}×…×\frac{p_m−1}{p_m}$</p></blockquote><p>例题：<a href="https://www.acwing.com/problem/content/875/">873. 欧拉函数</a></p><h2 id="素数（质数）的筛法"><a href="#素数（质数）的筛法" class="headerlink" title="素数（质数）的筛法"></a>素数（质数）的筛法</h2><h3 id="1-最普通的筛法-O-nlogn"><a href="#1-最普通的筛法-O-nlogn" class="headerlink" title="1.最普通的筛法 O(nlogn)"></a>1.最普通的筛法 O(nlogn)</h3><p>C++ 代码</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">get_primes2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> primes<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把素数存起来</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">+</span><span class="token operator">=</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//不管是合数还是质数，都用来筛掉后面它的倍数</span>            st<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-诶氏筛法-O-nloglogn"><a href="#2-诶氏筛法-O-nloglogn" class="headerlink" title="2.诶氏筛法 O(nloglogn)"></a>2.诶氏筛法 O(nloglogn)</h3><p>C++ 代码</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">get_primes1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            primes<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">+</span><span class="token operator">=</span>i<span class="token punctuation">)</span> st<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可以用质数就把所有的合数都筛掉；</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-线性筛-O-n"><a href="#3-线性筛-O-n" class="headerlink" title="3.线性筛 O(n)"></a>3.线性筛 O(n)</h3><p>1)当 i % $primes[j]$ !=0  时,说明此时遍历到的 primes[j] 不是i的质因子，那么只可能是此时的primes[j]&lt;i的最小质因子,所以$primes[j]*i$的最小质因子就是$primes[j]$;</p><p>2)当有 i%$primes[j]$==0 时,说明 i 的最小质因子是 $primes[j]$ ,因此$primes[j]*i$的最小质因子也就应该是 $prime[j]$，之后接着用 $st[primes[j+1]*i]=true$去筛合数时，就不是用最小质因子去更新了,因为i有最小 质因子 $primes[j]&lt;primes[j+1]$,此时的 $primes[j+1]$ 不是 $primes[j+1]*i$ 的最小质因子，此时就应该退出循环，避免之后重复进行筛选。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">get_primes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//外层从2~n迭代，因为这毕竟算的是1~n中质数的个数，而不是某个数是不是质数的判定</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> primes<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;=</span>n<span class="token operator">/</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//primes[j]&lt;=n/i:变形一下得到——primes[j]*i&lt;=n,把大于n的合数都筛了就没啥意义了</span>            st<span class="token punctuation">[</span>primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用最小质因子去筛合数</span>            <span class="token comment" spellcheck="true">//1)当i%primes[j]!=0时,说明此时遍历到的primes[j]不是i的质因子，那么只可能是此时的primes[j]&lt;i的</span>    <span class="token comment" spellcheck="true">//最小质因子,所以primes[j]*i的最小质因子就是primes[j];</span><span class="token comment" spellcheck="true">//2)当有i%primes[j]==0时,说明i的最小质因子是primes[j],因此primes[j]*i的最小质因子也就应该是</span>    <span class="token comment" spellcheck="true">//prime[j]，之后接着用st[primes[j+1]*i]=true去筛合数时，就不是用最小质因子去更新了,因为i有最小</span>    <span class="token comment" spellcheck="true">//质因子primes[j]&lt;primes[j+1],此时的primes[j+1]不是primes[j+1]*i的最小质因子，此时就应该</span>     <span class="token operator">/</span>退出循环，避免之后重复进行筛选。            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span>primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>作者：orzorz<br>链接：<a href="https://www.acwing.com/solution/content/7950/">https://www.acwing.com/solution/content/7950/</a><br>来源：AcWing<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><h2 id="逆元"><a href="#逆元" class="headerlink" title="逆元"></a>逆元</h2><h5 id="乘法逆元的定义"><a href="#乘法逆元的定义" class="headerlink" title="乘法逆元的定义"></a>乘法逆元的定义</h5><blockquote><p>若整数 b，m 互质，并且对于任意的整数 a，如果满足 b|a，则存在一个整数 x，使得 $a/b≡a×x(mod\ m)$，则称 x 为 b 的模 m 乘法逆元，记为$b^{−1}(mod\ m)$。<br>b 存在乘法逆元的充要条件是 b 与模数 m 互质。当模数 m 为质数时，$b^{m−2}$ 即为 b 的乘法逆元</p></blockquote><h2 id="扩展欧几里得算法"><a href="#扩展欧几里得算法" class="headerlink" title="扩展欧几里得算法"></a>扩展欧几里得算法</h2><h4 id="裴蜀定理"><a href="#裴蜀定理" class="headerlink" title="裴蜀定理"></a>裴蜀定理</h4><blockquote><p>裴蜀定理：若a,b是整数,且gcd(a,b)=d，那么对于任意的整数x、y，ax+by都一定是d的倍数，特别地，一定存在整数x,y，使ax+by=d成立。</p></blockquote><p>或者这样解释：</p><blockquote><p> 裴蜀定理：对任何整数a、b和它们的最大公约数d，关于未知数x和y的线性丢番图方程（称为裴蜀等式）：ax + by = m，有解当且仅当m是d的倍数。</p></blockquote><p>并且ax+by=m的通解：</p><p><img src="https://www.zhihu.com/equation?tex=%5Cbegin%7Bcases%7Dx_k+=+x+k%5Ccdot%5Cdisplaystyle%5Cfrac%7Bb%7D%7B%5Cgcd(a,b)%7D%5C%5Cy_k=y-k%5Ccdot%5Cdisplaystyle%5Cfrac%7Ba%7D%7B%5Cgcd(a,b)%7D%5Cend%7Bcases%7D(k%5Cin+%5Cmathbb%7BZ%7D)" alt="[公式]"></p><h4 id="裴蜀定理及其证明"><a href="#裴蜀定理及其证明" class="headerlink" title="裴蜀定理及其证明"></a>裴蜀定理及其证明</h4><p>转载于 <a href="https://zhuanlan.zhihu.com/p/100567253">https://zhuanlan.zhihu.com/p/100567253</a> Pecco</p><p><strong>下面hexo不支持图片内联，排版太乱，可直接跳过证明</strong> </p><blockquote><p>（裴蜀定理）：设 <img src="https://www.zhihu.com/equation?tex=a,+b" alt="[公式]"> 为正整数，则关于 <img src="https://www.zhihu.com/equation?tex=x,y" alt="[公式]"> 的方程 <img src="https://www.zhihu.com/equation?tex=ax+by=c" alt="[公式]"> 有整数解当且仅当 c 是 <img src="https://www.zhihu.com/equation?tex=%5Cgcd(a,b)" alt="[公式]"> 的倍数。</p><p>我们通过拓展欧几里得算法可以求得 ax+by=c 的一组解</p></blockquote><p>并且ax+by=c的通解：</p><p><img src="https://www.zhihu.com/equation?tex=%5Cbegin%7Bcases%7Dx_k+=+x+k%5Ccdot%5Cdisplaystyle%5Cfrac%7Bb%7D%7B%5Cgcd(a,b)%7D%5C%5Cy_k=y-k%5Ccdot%5Cdisplaystyle%5Cfrac%7Ba%7D%7B%5Cgcd(a,b)%7D%5Cend%7Bcases%7D(k%5Cin+%5Cmathbb%7BZ%7D)" alt="[公式]"></p><p>证明：</p><blockquote><p>我们求得了 <img src="https://ftp.bmp.ovh/imgs/2021/12/61d0a788cc17638b.png"> 的<strong>一组特解</strong>，那么<strong>通解</strong>是什么呢？</p><p>设除了已经求出的 <img src="https://www.zhihu.com/equation?tex=x,y" alt="[公式]"> 之外还有一组解 <img src="https://www.zhihu.com/equation?tex=x_1=x+%5Cdelta" alt="[公式]"> 和 <img src="https://www.zhihu.com/equation?tex=y_1" alt="[公式]"> ，那么由 <img src="https://www.zhihu.com/equation?tex=ax_1-a%5Cdelta+by=%5Cgcd(a,b)" alt="[公式]"> ，得 <img src="https://www.zhihu.com/equation?tex=ax_1+b(y-%5Cdisplaystyle%5Cfrac%7Ba%5Cdelta%7D%7Bb%7D)=%5Cgcd(a,b)" alt="[公式]"> ，得 <img src="https://www.zhihu.com/equation?tex=y_1=y-%5Cdisplaystyle%5Cfrac%7Ba%5Cdelta%7D%7Bb%7D" alt="[公式]"> 。</p><p>但是，我们必须要保证 <img src="https://www.zhihu.com/equation?tex=%5Cdelta" alt="[公式]"> 和 <img src="https://www.zhihu.com/equation?tex=%5Cdisplaystyle%5Cfrac%7Ba%5Cdelta%7D%7Bb%7D" alt="[公式]"> 都是整数，后者等于 <img src="https://www.zhihu.com/equation?tex=%5Cdisplaystyle%5Cfrac%7Ba%27%7D%7Bb%27%7D%5Cdelta" alt="[公式]"> ，其中 <img src="https://www.zhihu.com/equation?tex=a%27=%5Cdisplaystyle%5Cfrac%7Ba%7D%7B%5Cgcd(a,b)%7D" alt="[公式]"> ， <img src="https://www.zhihu.com/equation?tex=b%27=%5Cdisplaystyle%5Cfrac%7Bb%7D%7B%5Cgcd(a,b)%7D" alt="[公式]"> 。由于 <img src="https://www.zhihu.com/equation?tex=a%27" alt="[公式]"> 与 <img src="https://www.zhihu.com/equation?tex=b%27" alt="[公式]"> 互质， <img src="https://www.zhihu.com/equation?tex=%5Cdelta" alt="[公式]"> 应当等于 <img src="https://www.zhihu.com/equation?tex=kb%27" alt="[公式]"> （ <img src="https://www.zhihu.com/equation?tex=k" alt="[公式]"> 是整数），即：</p><p><img src="https://www.zhihu.com/equation?tex=%5Cbegin%7Bcases%7Dx_k+=+x+k%5Ccdot%5Cdisplaystyle%5Cfrac%7Bb%7D%7B%5Cgcd(a,b)%7D%5C%5Cy_k=y-k%5Ccdot%5Cdisplaystyle%5Cfrac%7Ba%7D%7B%5Cgcd(a,b)%7D%5Cend%7Bcases%7D(k%5Cin+%5Cmathbb%7BZ%7D)" alt="[公式]"></p><p>这便是该不定方程的通解</p><p>转载于 <a href="https://zhuanlan.zhihu.com/p/100567253">https://zhuanlan.zhihu.com/p/100567253</a> Pecco</p></blockquote><h4 id="拓展欧几里得算法"><a href="#拓展欧几里得算法" class="headerlink" title="拓展欧几里得算法"></a>拓展欧几里得算法</h4><p><strong>拓展欧几里得算法</strong>：它可以在辗转相除途中求出不定方程 <img src="https://www.zhihu.com/equation?tex=ax+by=c" alt="[公式]"> 的一组解。</p><p>公式推导如下：</p><p><img src="/../images/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/image-20211130105444207.png" alt="image-20211130105444207"></p><p>代码模板：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*ax+by=dbx+(a%b)y=dbx+(a-a/b*b)y=day+b(x-a/b*y)=d{    x=y    y=x-a/b*y}*/</span><span class="token keyword">int</span> <span class="token function">exgcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token function">exgcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token operator">%</span>b<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x0 <span class="token operator">=</span> x<span class="token punctuation">,</span>y0 <span class="token operator">=</span> y<span class="token punctuation">;</span>    x <span class="token operator">=</span> y0<span class="token punctuation">;</span>    y <span class="token operator">=</span> x0 <span class="token operator">-</span> a<span class="token operator">/</span>b <span class="token operator">*</span> y0<span class="token punctuation">;</span>    <span class="token keyword">return</span> d<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 算法模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>付账问题（贪心问题、均值不等式）</title>
      <link href="/2021/11/23/2021-11-23-fu-zhang-wen-ti-tan-xin-wen-ti-jun-zhi-bu-deng-shi/"/>
      <url>/2021/11/23/2021-11-23-fu-zhang-wen-ti-tan-xin-wen-ti-jun-zhi-bu-deng-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="付账问题（贪心问题、均值不等式）"><a href="#付账问题（贪心问题、均值不等式）" class="headerlink" title="付账问题（贪心问题、均值不等式）"></a>付账问题（贪心问题、均值不等式）</h2><p> <a href="https://www.acwing.com/problem/content/description/1237/">付账问题</a></p><p>几个人一起出去吃饭是常有的事。</p><p>但在结帐的时候，常常会出现一些争执。</p><p>现在有 n 个人出去吃饭，他们总共消费了 S 元。</p><p>其中第 i 个人带了 ai 元。</p><p>幸运的是，所有人带的钱的总数是足够付账的，但现在问题来了：每个人分别要出多少钱呢？</p><p>为了公平起见，我们希望在总付钱量恰好为 S 的前提下，最后每个人付的钱的标准差最小。</p><p>这里我们约定，每个人支付的钱数可以是任意非负实数，即可以不是 1 分钱的整数倍。</p><p>你需要输出最小的标准差是多少。</p><p>标准差的介绍：标准差是多个数与它们平均数差值的平方平均数，一般用于刻画这些数之间的“偏差有多大”。</p><p>形式化地说，设第 i 个人付的钱为 bi 元，那么标准差为 :</p><p><img src="https://img-blog.csdnimg.cn/9f6bb16d672e4d5f94ae83c12c1b5c53.png" alt="在这里插入图片描述"><br>输入格式<br>第一行包含两个整数 n、S；</p><p>第二行包含 n 个非负整数 a1, …, an。</p><p>输出格式<br>输出最小的标准差，四舍五入保留 4 位小数。</p><p>数据范围<br>1≤n≤5×10^5,<br>0≤ai,S≤10^9<br>输入样例1：<br>5 2333<br>666 666 666 666 666<br>输出样例1：<br>0.0000<br>输入样例2：<br>10 30<br>2 1 4 7 4 8 3 6 4 7<br>输出样例2：<br>0.7928</p><h2 id="题解分析："><a href="#题解分析：" class="headerlink" title="题解分析："></a>题解分析：</h2><blockquote><p>数学知识：均值不等式中平方平均数大于等于算术平均数<br>$\frac{X_1^2+X_2^2+…+X_n^2}{n}&gt;=(\frac{X_1+X_2+…+X_n}{n})^2$<br>当且仅当x1=x2=…=xn时，取到最小值。</p></blockquote><p>题目中需要求标准差最小值，标准查=方差开根号，方差满足前面那个平方平均数的式子，<br>这里假设所有人都带够了钱，因此b1+b2+…+bn=S，$b_1-\frac{S}{n}+b_2-\frac{S}{n}+…+b_n-\frac{S}{n}=0$，各项和为0，因此带入均值不等式可以得出<br>$\frac{(b_1-\frac{S}{n})^2+(b_2-\frac{S}{n})^2+…+(b_n-\frac{S}{n})^2}{n}&gt;=0$，当且仅当<br>$b_1-\frac{S}{n}=b_2-\frac{S}{n}=…=b_n-\frac{S}{n}$时成立，带入b1+b2+…+bn=S得出每项等于$\frac{S}{n}$，这是最优解<br><img src="https://img-blog.csdnimg.cn/5d29399fa54340f3a3dbb619ba81861d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAZ2p3N2ExNzE=,size_15,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>那么如果n个人带的钱都大于 S/n 的平均数的话，都出 S/n 标准差就可以取到 0，<br>但是有可能有一部分人没有带够 S/n 元，那么他们应该把自己有的所有钱都出出来，尽可能靠近平均值 S/n ，<br>现在假设数组a为每个人带的钱数，数组b为每个人出的钱数， a1 &lt; S/n， 那么 b1 = a1<br>然后对于$\frac{(b_1-\frac{S}{n})^2+(b_2-\frac{S}{n})^2+…+(b_n-\frac{S}{n})^2}{n}=\frac{(b_1-\frac{S}{n})^2}{n}+\frac{(b_2-\frac{S}{n})^2+…+(b_n-\frac{S}{n})^2}{n}$<br>因为等式右边的b1=a1，所以$\frac{(b_1-\frac{S}{n})^2}{n}$这部分已经是定值了，因此对于后面的人来说<br>$\frac{(b_2-\frac{S}{n})^2+…+(b_n-\frac{S}{n})^2}{n}$这个等式当 b2=b3=…=bn= (S-a1)/n 时，是最优的，后面的情况类似。<br>需要注意的是因为后面的人需要帮前面的人补足缺失的钱数，所以我们整个数组a必须从小到大排序<br><img src="https://img-blog.csdnimg.cn/a6b37957f9114a68ac67345a5ad3b519.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAZ2p3N2ExNzE=,size_19,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>AC代码</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> eps <span class="token operator">=</span> <span class="token number">1e-6</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">5e5</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">double</span> b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">double</span> s<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%lf"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> avg <span class="token operator">=</span> s<span class="token operator">*</span><span class="token number">1.0</span><span class="token operator">/</span>n<span class="token punctuation">;</span>    <span class="token keyword">double</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">double</span> cur <span class="token operator">=</span> s<span class="token operator">*</span><span class="token number">1.0</span><span class="token operator">/</span><span class="token punctuation">(</span>n<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>cur<span class="token punctuation">)</span> cur <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>cur<span class="token operator">-</span>avg<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>cur<span class="token operator">-</span>avg<span class="token punctuation">)</span><span class="token punctuation">;</span>        s <span class="token operator">-</span><span class="token operator">=</span> cur<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.4lf\n"</span><span class="token punctuation">,</span><span class="token function">sqrt</span><span class="token punctuation">(</span>ans<span class="token operator">*</span><span class="token number">1.0</span><span class="token operator">/</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
            <tag> 贪心 </tag>
            
            <tag> 均值不等式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>糖果传递（贪心）——《算法竞赛进阶指南》,微软面试题 , HAOI2008</title>
      <link href="/2021/11/22/2021-11-22-tang-guo-chuan-di-tan-xin/"/>
      <url>/2021/11/22/2021-11-22-tang-guo-chuan-di-tan-xin/</url>
      
        <content type="html"><![CDATA[<h2 id="糖果传递（贪心）"><a href="#糖果传递（贪心）" class="headerlink" title="糖果传递（贪心）"></a>糖果传递（贪心）</h2><p><a href="https://www.acwing.com/problem/content/124/">糖果传递</a></p><p>有 n 个小朋友坐成一圈，每人有 a[i] 个糖果。</p><p>每人只能给左右两人传递糖果。</p><p>每人每次传递一个糖果代价为 1。</p><p>求使所有人获得均等糖果的最小代价。</p><p>输入格式<br>第一行输入一个正整数 n，表示小朋友的个数。</p><p>接下来 n 行，每行一个整数 a[i]，表示第 i 个小朋友初始得到的糖果的颗数。</p><p>输出格式<br>输出一个整数，表示最小代价。</p><p>数据范围<br>1≤n≤1000000,<br>0≤a[i]≤2×109,<br>数据保证一定有解。</p><p>输入样例：<br>4<br>1<br>2<br>5<br>4<br>输出样例：<br>4</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>首先，最终每个小朋友的糖果数量可以计算出来，等于糖果总数除以n，用 $\overline{a}$ 表示。<br>假设标号为i的小朋友开始有ai颗糖果，Xi表示第i个小朋友给了第i-1个小朋友Xi颗糖果，如果Xi&lt;0，说明第i-1个小朋友给了第i个小朋友Xi颗糖果，X1表示第一个小朋友给第n个小朋友的糖果数量。 所以最后的答案就是ans=|X1| + |X2| + |X3| + ……+ |Xn|。</p><p><img src="/../images/tijie/image-20211122115328100.png" alt="image-20211122115328100"></p><p>对于第一个小朋友，他给了第n个小朋友X1颗糖果，还剩a1-X1颗糖果；但因为第2个小朋友给了他X2颗糖果，所以最后还剩a1-X1+X2颗糖果。根据题意，最后的糖果数量等于$\overline{a}$，即得到了一个方程：a1-X1+X2= $\overline{a}$ 。</p><p>其他的方程如下列方程所示：并带入求解</p><p>$<br>\begin{cases}<br>a_1-X_1+X_2=\overline{a}\<br>a_2-X_2+X_3=\overline{a}\<br>a_3-X_3+X_4=\overline{a}\<br>……\<br>a_n-X_n+X_1=\overline{a}\<br>\end{cases}<br>$ =&gt; $\begin{cases}<br>X_1=X_1\<br>X_2=\overline{a}-a_1+X_1\<br>X_3=\overline{a}-a_2+X_2=\overline{a}-a_2+\overline{a}-a_1+X_1\<br>X_4=X_1-((a_1+a_2+a_3)-3*\overline{a})\<br>……\<br>X_n=X_1-((a_1+a_2+…+a_{n-1})-(n-1)*\overline{a})\<br>\end{cases}$ </p><p>设$C_n=(a_1+a_2+…+a_{n-1})-(n-1)*\overline{a}$ </p><p>易得：$C_n=C_{n-1}+a_{n-1}-\overline{a}$ ，$C_1=0$ </p><p>因此最后的答案为 ans=|X1-C1| + |X1-C2| + |X1-C3| + ……+ |X1-Cn|。</p><p>此表达式的意思为求一个点 X1 到n个点距离之和最小，求解中位数就是X1,然后计算代价就行。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e6</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    LL sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//平均数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sum <span class="token operator">+</span><span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    sum <span class="token operator">/</span><span class="token operator">=</span> n<span class="token punctuation">;</span>    c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">-</span>sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>c<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>c<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LL ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>c<span class="token punctuation">[</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大臣的旅费(树的直径、dfs、bfs、树形dp)</title>
      <link href="/2021/11/20/2021-11-20-da-chen-de-lu-fei-shu-de-zhi-jing-dfs-bfs-shu-xing-dp/"/>
      <url>/2021/11/20/2021-11-20-da-chen-de-lu-fei-shu-de-zhi-jing-dfs-bfs-shu-xing-dp/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.acwing.com/problem/content/description/1209/">大臣的旅费</a></p><p>很久以前，T王国空前繁荣。</p><p>为了更好地管理国家，王国修建了大量的快速路，用于连接首都和王国内的各大城市。</p><p>为节省经费，T国的大臣们经过思考，制定了一套优秀的修建方案，使得任何一个大城市都能从首都直接或者通过其他大城市间接到达。</p><p>同时，如果不重复经过大城市，从首都到达每个大城市的方案都是唯一的。</p><p>J是T国重要大臣，他巡查于各大城市之间，体察民情。</p><p>所以，从一个城市马不停蹄地到另一个城市成了J最常做的事情。</p><p>他有一个钱袋，用于存放往来城市间的路费。</p><p>聪明的J发现，如果不在某个城市停下来修整，在连续行进过程中，他所花的路费与他已走过的距离有关，在走第x千米到第x+1千米这一千米中（x是整数），他花费的路费是x+10这么多。也就是说走1千米花费11，走2千米要花费23。</p><p>J大臣想知道：他从某一个城市出发，中间不休息，到达另一个城市，所有可能花费的路费中最多是多少呢？</p><p>输入格式<br>输入的第一行包含一个整数 n，表示包括首都在内的T王国的城市数。</p><p>城市从 1 开始依次编号，1 号城市为首都。</p><p>接下来 n−1 行，描述T国的高速路（T国的高速路一定是 n−1 条）。</p><p>每行三个整数 Pi,Qi,Di，表示城市 Pi 和城市 Qi 之间有一条双向高速路，长度为 Di 千米。</p><p>输出格式<br>输出一个整数，表示大臣J最多花费的路费是多少。</p><p>数据范围<br>1≤n≤10^5,<br>1≤Pi,Qi≤n,<br>1≤Di≤1000<br>输入样例：<br>5<br>1  2  2<br>1  3  1<br>2  4  5<br>2  5  4<br>输出样例：<br>135</p><h2 id="题解分析"><a href="#题解分析" class="headerlink" title="题解分析"></a>题解分析</h2><p>此题有多种做法，下面使用求树的直径+dfs 来解决<br>题意求图中最远的两点，这里的图是无向图，可以看作树<br>树中所有最短路径距离的最大值即为树的直径。<br><strong>如何求树的直径？</strong><br>两次dfs，从任意点 x 出发，dfs搜索到距离 x 最远的点 y ，<br>再从 y 出发，dfs搜索到距离 y 最远的点 z。<br>y 到 z 的距离就是树的直径。</p><p>证明可以看别人写的证明 <a href="https://blog.csdn.net/forever_dreams/article/details/81051578">https://blog.csdn.net/forever_dreams/article/details/81051578</a><br>此处不做证明<br>那么解题方法就是这个思路。看下实现的代码<br>代码做了注释</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*题目思路是，从一个点出发找到距离这个点最远的点，然后从这个最远的点出发再找一次最远点，两个最远点就构成树的直径*/</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">struct</span> Edge<span class="token punctuation">{</span>    <span class="token keyword">int</span> id<span class="token punctuation">,</span>w<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>Edge<span class="token operator">></span>h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dist<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存储某个点到各个点的距离</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> father<span class="token punctuation">,</span><span class="token keyword">int</span> distance<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//当前遍历的u，上次遍历的这次不要再回去father，到最远边的距离distance距离</span><span class="token punctuation">{</span>        dist<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> distance<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>h<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        Edge t <span class="token operator">=</span> h<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> id <span class="token operator">=</span> t<span class="token punctuation">.</span>id<span class="token punctuation">,</span> w <span class="token operator">=</span> t<span class="token punctuation">.</span>w<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>id<span class="token operator">!=</span>father<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>u<span class="token punctuation">,</span>distance<span class="token operator">+</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token number">-1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> p<span class="token punctuation">,</span>q<span class="token punctuation">,</span>d<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">,</span><span class="token operator">&amp;</span>q<span class="token punctuation">,</span><span class="token operator">&amp;</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>q<span class="token punctuation">,</span>d<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>p<span class="token punctuation">,</span>d<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> maxt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> maxk<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// cout&lt;&lt;dist[i]&lt;&lt;' ';</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> maxt<span class="token punctuation">)</span><span class="token punctuation">{</span>            maxt <span class="token operator">=</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            maxk <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// cout&lt;&lt;endl;</span>    <span class="token comment" spellcheck="true">// cout&lt;&lt;maxt&lt;&lt;' '&lt;&lt;maxk&lt;&lt;endl;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>maxk<span class="token punctuation">,</span>maxk<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> maxt2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> maxk2<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> maxt2<span class="token punctuation">)</span><span class="token punctuation">{</span>            maxt2 <span class="token operator">=</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            maxk2 <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// cout&lt;&lt;maxt2&lt;&lt;' '&lt;&lt;maxk2&lt;&lt;endl;</span>        LL ans <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">*</span><span class="token punctuation">(</span>LL<span class="token punctuation">)</span>maxt2 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token punctuation">(</span>LL<span class="token punctuation">)</span>maxt2<span class="token punctuation">)</span><span class="token operator">*</span>maxt2<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
            <tag> 树的直径 </tag>
            
            <tag> dfs </tag>
            
            <tag> 树形dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>交换瓶子(图论、环、置换群、贪心)</title>
      <link href="/2021/11/18/jiao-huan-ping-zi-tu-lun-huan-zhi-huan-qun-tan-xin/"/>
      <url>/2021/11/18/jiao-huan-ping-zi-tu-lun-huan-zhi-huan-qun-tan-xin/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.acwing.com/problem/content/1226/">交换瓶子</a></p><p>有 N 个瓶子，编号 1∼N，放在架子上。</p><p>比如有 5 个瓶子：</p><p>2 1 3 5 4</p><p>要求每次拿起 2 个瓶子，交换它们的位置。</p><p>经过若干次后，使得瓶子的序号为：</p><p>1 2 3 4 5</p><p>对于这么简单的情况，显然，至少需要交换 22 次就可以复位。</p><p>如果瓶子更多呢？你可以通过编程来解决。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含一个整数 N，表示瓶子数量。</p><p>第二行包含 N 个整数，表示瓶子目前的排列状况。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个正整数，表示至少交换多少次，才能完成排序。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤N≤10000</p><h4 id="输入样例1："><a href="#输入样例1：" class="headerlink" title="输入样例1："></a>输入样例1：</h4><p>5<br>3 1 2 5 4</p><h4 id="输出样例1："><a href="#输出样例1：" class="headerlink" title="输出样例1："></a>输出样例1：</h4><p>3</p><h4 id="输入样例2："><a href="#输入样例2：" class="headerlink" title="输入样例2："></a>输入样例2：</h4><p>5<br>5 4 3 2 1</p><h4 id="输出样例2："><a href="#输出样例2：" class="headerlink" title="输出样例2："></a>输出样例2：</h4><p>2</p><h4 id="题解分析："><a href="#题解分析：" class="headerlink" title="题解分析："></a>题解分析：</h4><p>环、置换群问题</p><p>比如有 5个瓶子：序列为2 1 3 5 4</p><p>下标：1 2 3 4 5 </p><p>序号：2 1 3 5 4</p><p>那么，此序列构成的环为 </p><p><img src="/../images/%E7%8E%AF%E3%80%81%E7%BD%AE%E6%8D%A2%E7%BE%A4%E9%97%AE%E9%A2%98/image-20211118220425050.png" alt="image-20211118220425050"></p><p>每个序号指向序列复位后每个序号应该在的位置，就是环的构建方式。</p><p>构建出来的环满足这样的特性：每个点的出度和入度均为 1 </p><p>可以发现，</p><p>如果我们交换不同环中的两个点：两个环会合并成一个环</p><p>如果交换同一个环中的两个点：一个环会分裂成两个环</p><p>如果序列有n个数，我们最终的结果是需要将环分裂为 n 个，这样每个点都指向他自己，序列也会复位。</p><p>因此我们必须每次交换同一个环中的点，可知交换一次环数加1，统计环的个数，如果有 k 个环，则需要 n - k 个操作使其变成 n 个环。</p><p>此题得解。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">10005</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//把此环中的每个结点都遍历一遍 ，关键在于 j = a[j] </span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span> st<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token boolean">true</span><span class="token punctuation">;</span> j<span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                st<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>n<span class="token operator">-</span>k<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 环 </tag>
            
            <tag> 置换群 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日志统计（滑动窗口，双指针问题）</title>
      <link href="/2021/11/18/ri-zhi-tong-ji-hua-dong-chuang-kou-shuang-zhi-zhen-wen-ti/"/>
      <url>/2021/11/18/ri-zhi-tong-ji-hua-dong-chuang-kou-shuang-zhi-zhen-wen-ti/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.acwing.com/problem/content/1240/">日志统计</a></p><p>小明维护着一个程序员论坛。现在他收集了一份”点赞”日志，日志共有 N 行。</p><p>其中每一行的格式是：</p><p>ts id<br>表示在 ts 时刻编号 id 的帖子收到一个”赞”。</p><p>现在小明想统计有哪些帖子曾经是”热帖”。</p><p>如果一个帖子曾在任意一个长度为 D 的时间段内收到不少于 K 个赞，小明就认为这个帖子曾是”热帖”。</p><p>具体来说，如果存在某个时刻 T 满足该帖在 [T,T+D) 这段时间内(注意是左闭右开区间)收到不少于 K 个赞，该帖就曾是”热帖”。</p><p>给定日志，请你帮助小明统计出所有曾是”热帖”的帖子编号。</p><p>输入格式<br>第一行包含三个整数 N,D,K。</p><p>以下 N 行每行一条日志，包含两个整数 ts 和 id。</p><p>输出格式<br>按从小到大的顺序输出热帖 id。</p><p>每个 id 占一行。</p><p>数据范围<br>1≤K≤N≤105,<br>0≤ts,id≤105,<br>1≤D≤10000<br>输入样例：<br>7 10 2<br>0 1<br>0 10<br>10 10<br>10 1<br>9 1<br>100 3<br>100 3<br>输出样例：<br>1<br>3</p><h2 id="题解思路："><a href="#题解思路：" class="headerlink" title="题解思路："></a>题解思路：</h2><p>滑动窗口，双指针问题：<br>遍历时间段，前指针 i ，后指针 j ，logs[i].second对应的帖子点赞增加，前指针 i++<br>如果 logs[i].first - logs[j].first &gt; D 超过题目给定的时刻区间，<br>则把logs[j].second 对应的帖子点赞数减少，<br>同时 j++，直到不满足 logs[i].first - logs[j].first &gt; D 。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> PII<span class="token punctuation">;</span>PII logs<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> cnt<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录每个帖子的点赞数</span><span class="token keyword">bool</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//记录是热帖的</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>d<span class="token punctuation">,</span>k<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>d<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>logs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">,</span> <span class="token operator">&amp;</span>logs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>logs<span class="token punctuation">,</span>logs<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> id <span class="token operator">=</span> logs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>        cnt<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>logs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">-</span> logs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">>=</span> d<span class="token punctuation">)</span><span class="token punctuation">{</span>            cnt<span class="token punctuation">[</span>logs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">>=</span>k<span class="token punctuation">)</span> st<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
            <tag> 滑动窗口 </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三体攻击(3维前缀和)</title>
      <link href="/2021/11/17/2021-11-17-san-ti-gong-ji-3-wei-qian-zhui-he/"/>
      <url>/2021/11/17/2021-11-17-san-ti-gong-ji-3-wei-qian-zhui-he/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.acwing.com/problem/content/description/1234/">三体攻击</a></p><p>三体人将对地球发起攻击。</p><p>为了抵御攻击，地球人派出了 A×B×C 艘战舰，在太空中排成一个 A 层 B 行 C 列的立方体。</p><p>其中，第 i 层第 j 行第 k 列的战舰（记为战舰 (i,j,k)）的生命值为 d(i,j,k)。</p><p>三体人将会对地球发起 m 轮“立方体攻击”，每次攻击会对一个小立方体中的所有战舰都造成相同的伤害。</p><p>具体地，第 t 轮攻击用 7 个参数 lat,rat,lbt,rbt,lct,rct,ht 描述；</p><p>所有满足 i∈[lat,rat],j∈[lbt,rbt],k∈[lct,rct] 的战舰 (i,j,k) 会受到 ht 的伤害。</p><p>如果一个战舰累计受到的总伤害超过其防御力，那么这个战舰会爆炸。</p><p>地球指挥官希望你能告诉他，第一艘爆炸的战舰是在哪一轮攻击后爆炸的。</p><p>输入格式<br>第一行包括 4 个正整数 A,B,C,m；</p><p>第二行包含 A×B×C 个整数，其中第 ((i−1)×B+(j−1))×C+(k−1)+1 个数为 d(i, j, k)；</p><p>第 3 到第 m+2 行中，第 (t − 2) 行包含 7 个正整数 lat, rat, lbt, rbt, lct, rct, ht。</p><p>输出格式<br>输出第一个爆炸的战舰是在哪一轮攻击后爆炸的。</p><p>保证一定存在这样的战舰。</p><p>数据范围<br>1≤A×B×C≤106,<br>1≤m≤106,<br>0≤d(i, j, k), ht≤109,<br>1≤lat≤rat≤A,<br>1≤lbt≤rbt≤B,<br>1≤lct≤rct≤C<br>层、行、列的编号都从 1 开始。</p><p>输入样例：<br>2 2 2 3<br>1 1 1 1 1 1 1 1<br>1 2 1 2 1 1 1<br>1 1 1 2 1 2 1<br>1 1 1 1 1 1 2<br>输出样例：<br>2<br>样例解释<br>在第 2 轮攻击后，战舰 (1,1,1) 总共受到了 2 点伤害，超出其防御力导致爆炸</p><h2 id="题解分析："><a href="#题解分析：" class="headerlink" title="题解分析："></a>题解分析：</h2><p>前置知识：<br>三维前缀和公式：<br>S(x,y,z) = b(x,y,z) + S(x-1,y,z) + S(x,y-1,z) - S(x-1,y-1,z) + S(x,y,z-1) - S(x-1,y,z-1) - S(x,y-1,z-1) + S(x-1,y-1,z-1)<br>三维差分操作 给(x1,y1,z1) 到 (x2,y2,z2) 加 h，插入操作 ：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>LL b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> x1<span class="token punctuation">,</span><span class="token keyword">int</span> x2<span class="token punctuation">,</span><span class="token keyword">int</span> y1<span class="token punctuation">,</span><span class="token keyword">int</span> y2<span class="token punctuation">,</span><span class="token keyword">int</span> z1<span class="token punctuation">,</span><span class="token keyword">int</span> z2<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//三维差分操作</span><span class="token punctuation">{</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>    y1<span class="token punctuation">,</span>    z1<span class="token punctuation">)</span><span class="token punctuation">]</span>   <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>    y1<span class="token punctuation">,</span>    z2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>    y2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  z1<span class="token punctuation">)</span><span class="token punctuation">]</span>   <span class="token operator">-</span><span class="token operator">=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>    y2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  z2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  y1<span class="token punctuation">,</span>    z1<span class="token punctuation">)</span><span class="token punctuation">]</span>   <span class="token operator">-</span><span class="token operator">=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  y1<span class="token punctuation">,</span>    z2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  y2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  z1<span class="token punctuation">)</span><span class="token punctuation">]</span>   <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  y2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  z2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>ac代码：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">2000010</span><span class="token punctuation">;</span><span class="token keyword">int</span> A<span class="token punctuation">,</span>B<span class="token punctuation">,</span>C<span class="token punctuation">,</span>m<span class="token punctuation">;</span>LL s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>bp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> Op<span class="token punctuation">{</span>    <span class="token keyword">int</span> x1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>y2<span class="token punctuation">,</span>z1<span class="token punctuation">,</span>z2<span class="token punctuation">,</span>h<span class="token punctuation">;</span><span class="token punctuation">}</span>op<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span>B<span class="token operator">+</span><span class="token punctuation">(</span>j<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span>C<span class="token operator">+</span>k<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>LL b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> x1<span class="token punctuation">,</span><span class="token keyword">int</span> x2<span class="token punctuation">,</span><span class="token keyword">int</span> y1<span class="token punctuation">,</span><span class="token keyword">int</span> y2<span class="token punctuation">,</span><span class="token keyword">int</span> z1<span class="token punctuation">,</span><span class="token keyword">int</span> z2<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//三维差分操作</span><span class="token punctuation">{</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>    y1<span class="token punctuation">,</span>    z1<span class="token punctuation">)</span><span class="token punctuation">]</span>   <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>    y1<span class="token punctuation">,</span>    z2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>    y2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  z1<span class="token punctuation">)</span><span class="token punctuation">]</span>   <span class="token operator">-</span><span class="token operator">=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>    y2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  z2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  y1<span class="token punctuation">,</span>    z1<span class="token punctuation">)</span><span class="token punctuation">]</span>   <span class="token operator">-</span><span class="token operator">=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  y1<span class="token punctuation">,</span>    z2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  y2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  z1<span class="token punctuation">)</span><span class="token punctuation">]</span>   <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  y2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  z2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>bp<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>t<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//操作</span>        <span class="token function">insert</span><span class="token punctuation">(</span>bp<span class="token punctuation">,</span>op<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x1<span class="token punctuation">,</span>op<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x2<span class="token punctuation">,</span>op<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y1<span class="token punctuation">,</span>op<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y2<span class="token punctuation">,</span>op<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>z1<span class="token punctuation">,</span>op<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>z2<span class="token punctuation">,</span>op<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>A<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>B<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">&lt;=</span>C<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//三维前缀和</span>                bp<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>bp<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span>   k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                bp<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>bp<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>   j<span class="token number">-1</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                bp<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">=</span>bp<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">,</span> j<span class="token number">-1</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                bp<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>bp<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>   j<span class="token punctuation">,</span>   k<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                bp<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">=</span>bp<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span>   k<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                bp<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">=</span>bp<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>   j<span class="token number">-1</span><span class="token punctuation">,</span> k<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                bp<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>bp<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">,</span> j<span class="token number">-1</span><span class="token punctuation">,</span> k<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>bp<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>A<span class="token punctuation">,</span> <span class="token operator">&amp;</span>B<span class="token punctuation">,</span><span class="token operator">&amp;</span>C<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>A<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>B<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">&lt;=</span>C<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">insert</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>i<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">,</span>k<span class="token punctuation">,</span>s<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> x1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>y2<span class="token punctuation">,</span>z1<span class="token punctuation">,</span>z2<span class="token punctuation">,</span>h<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x1<span class="token punctuation">,</span><span class="token operator">&amp;</span>x2<span class="token punctuation">,</span><span class="token operator">&amp;</span>y1<span class="token punctuation">,</span><span class="token operator">&amp;</span>y2<span class="token punctuation">,</span><span class="token operator">&amp;</span>z1<span class="token punctuation">,</span><span class="token operator">&amp;</span>z2<span class="token punctuation">,</span><span class="token operator">&amp;</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        op<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>x1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>y2<span class="token punctuation">,</span>z1<span class="token punctuation">,</span>z2<span class="token punctuation">,</span><span class="token operator">-</span>h<span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> m<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果有爆炸的,往左继续找</span>            r <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> l <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果没有爆炸的，往右找</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模板题 </tag>
            
            <tag> 前缀和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性同余方程(扩展欧几里得算法)</title>
      <link href="/2021/11/17/2021-11-17-xian-xing-tong-yu-fang-cheng-kuo-zhan-ou-ji-li-de-suan-fa/"/>
      <url>/2021/11/17/2021-11-17-xian-xing-tong-yu-fang-cheng-kuo-zhan-ou-ji-li-de-suan-fa/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.acwing.com/problem/content/880/">线性同余方程</a></p><p>给定 n 组数据 ai,bi,mi，对于每组数求出一个 xi，使其满足 $a_i * x_i≡ b_i (mod\ m_i)$，如果无解则输出 impossible。</p><p>输入格式<br>第一行包含整数 n。</p><p>接下来 n 行，每行包含一组数据 ai,bi,mi。</p><p>输出格式<br>输出共 n 行，每组数据输出一个整数表示一个满足条件的 xi，如果无解则输出 impossible。</p><p>每组数据结果占一行，结果可能不唯一，输出任意一个满足条件的结果均可。</p><p>输出答案必须在 int 范围之内。</p><p>数据范围<br>1≤n≤10^5,<br>1≤ai,bi,mi≤2×10^9<br>输入样例：<br>2<br>2 3 6<br>4 3 5<br>输出样例：<br>impossible<br>-3</p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>ax = b(mod m)<br>ax = b + ym<br>ax - my = b 这个式子符合裴蜀定理，ax-my的整数解为gcd(a,-m)的倍数，通过拓展欧几里得算法求出<br>它的一组解(x,y)和gcd(a,-m)后,判断gcd(a,-m)是否可以整除b,如果可以整除,等式两边就乘以 b/gcd(a,-m)，<br>得出ax-ym = b的(x,y)解</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*ax+by=d  bx+(a%b)y=d bx+(a-a/b*b)y=day+bx-a/b*by=day+b(x-a/b*y)=dx = yy = x-a/b*y*/</span><span class="token keyword">int</span> <span class="token function">exgcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token function">exgcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token operator">%</span>b<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    y <span class="token operator">-</span><span class="token operator">=</span> a<span class="token operator">/</span>b<span class="token operator">*</span>x<span class="token punctuation">;</span>    <span class="token keyword">return</span> d<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">--</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>m<span class="token punctuation">;</span>        <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>        cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token operator">>></span>m<span class="token punctuation">;</span>        <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token function">exgcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token operator">-</span>m<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">%</span>d<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>LL<span class="token punctuation">)</span>x<span class="token operator">*</span><span class="token punctuation">(</span>b<span class="token operator">/</span>d<span class="token punctuation">)</span><span class="token operator">%</span>m<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"impossible"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模板题 </tag>
            
            <tag> 数学知识 </tag>
            
            <tag> 同余 </tag>
            
            <tag> 扩展欧几里得算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1维2维3维前缀和</title>
      <link href="/2021/11/17/2021-11-17-1-wei-2-wei-3-wei-qian-zhui-he/"/>
      <url>/2021/11/17/2021-11-17-1-wei-2-wei-3-wei-qian-zhui-he/</url>
      
        <content type="html"><![CDATA[<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>前缀和主要应用于对区间内每个数进行加或减操作时，如果遍历区间进行操作，时间复杂度较高，在数据量大时无法AC，如果对差分数组进行操作的话，可以把时间复杂度降为O(1)，可以AC</p><p>下面设b[]数组为前缀和数组，s[]数组为原数组</p><h3 id="一维前缀和"><a href="#一维前缀和" class="headerlink" title="一维前缀和"></a>一维前缀和</h3><ul><li><p>构造差分数组：$b[i]=s[i]-s[i-1]$</p></li><li><p>求原数组（前缀和操作）：$s[i]=b[i]+s[i-1]$</p></li><li><p>给 l 到 r 区间加 c ，对差分数组的插入操作：</p><p>b[l] += c</p><p>b[r+1] -= c</p></li></ul><h3 id="二维前缀和"><a href="#二维前缀和" class="headerlink" title="二维前缀和"></a>二维前缀和</h3><ul><li><p>构造差分数组：$b[i][j]=s[i][j]-s[i-1][j]-s[i][j-1]+s[i-1][j-1]$</p></li><li><p>求原数组（前缀和操作）：$s[i][j]=b[i][j]+s[i-1][j]+s[i][j-1]-s[i-1][j-1]$ </p></li><li><p>给(x1,y1)到(x2,y2) 加 c ,对差分数组的插入操作：</p><p>$b[x1][y1]+=c$ </p><p>$b[x2+1][y1]-=c$</p><p>$b[x1][y2+1]-=c$</p><p>$b[x2+1][y2+1]+=c$ </p></li></ul><h3 id="三维前缀和"><a href="#三维前缀和" class="headerlink" title="三维前缀和"></a>三维前缀和</h3><ul><li><p>S(x,y,z) = b(x,y,z) + S(x-1,y,z) + S(x,y-1,z) - S(x-1,y-1,z) + S(x,y,z-1) - S(x-1,y,z-1) - S(x,y-1,z-1) + S(x-1,y-1,z-1)​</p></li><li><p>由上式 可得 b(x,y,z) 计算公式，此处省略</p></li><li><p>给(x1,y1,z1) 到 (x2,y2,z2) 加 h，对差分数组的插入操作 ：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span>B<span class="token operator">+</span><span class="token punctuation">(</span>j<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span>C<span class="token operator">+</span><span class="token punctuation">(</span>k<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> x1<span class="token punctuation">,</span><span class="token keyword">int</span> x2<span class="token punctuation">,</span><span class="token keyword">int</span> y1<span class="token punctuation">,</span><span class="token keyword">int</span> y2<span class="token punctuation">,</span><span class="token keyword">int</span> z1<span class="token punctuation">,</span><span class="token keyword">int</span> z2<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>    y1<span class="token punctuation">,</span>    z1<span class="token punctuation">)</span><span class="token punctuation">]</span>   <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>    y1<span class="token punctuation">,</span>    z2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>    y2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  z1<span class="token punctuation">)</span><span class="token punctuation">]</span>   <span class="token operator">-</span><span class="token operator">=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>    y2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  z2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  y1<span class="token punctuation">,</span>    z1<span class="token punctuation">)</span><span class="token punctuation">]</span>   <span class="token operator">-</span><span class="token operator">=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  y1<span class="token punctuation">,</span>    z2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  y2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  z1<span class="token punctuation">)</span><span class="token punctuation">]</span>   <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span>x2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  y2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  z2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><p><a href="2021-11-17-%E4%B8%89%E4%BD%93%E6%94%BB%E5%87%BB(3%E7%BB%B4%E5%89%8D%E7%BC%80%E5%92%8C).md">三维前缀和例题</a> </p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法模板 </tag>
            
            <tag> 前缀和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【寒窑赋】吕蒙正</title>
      <link href="/2021/11/16/2021-11-16-han-yao-fu-lu-meng-zheng/"/>
      <url>/2021/11/16/2021-11-16-han-yao-fu-lu-meng-zheng/</url>
      
        <content type="html"><![CDATA[<h4 id="寒窑赋"><a href="#寒窑赋" class="headerlink" title="寒窑赋"></a>寒窑赋</h4><p>天有不测风云，人有旦夕祸福。</p><p>蜈蚣百足，行不及蛇；</p><p>雄鸡扇翼，飞不过鸦。</p><p>马有千里之程，无骑不能自往；</p><p>人有冲天之志，非运不能腾达。</p><p>文章盖世，孔子厄困于陈邦；武略超群，太公垂钓于渭水。</p><p>颜渊命短，实非凶恶之徒；盗跖年长，不是善良之辈。</p><p>尧舜明圣，却生不肖之儿；瞽叟愚顽，反生大孝之子。</p><p>张良原是布衣，萧何曾为县吏；韩信未遇之时，无一日之餐，及至遇行，腰悬三齐玉印。</p><p>楚霸英雄，败于乌江自刎；汉王柔弱，竟有万里江山。</p><p>晏子身短五尺，使楚拜齐名相；诸葛力无缚鸡，出作蜀汉军师。</p><p>李广有射虎之威，到老无封；冯夷有乘龙之才，一生不遇。</p><p>满腹文章，白发竟然不中；才疏学浅，少年及第登科。</p><p>深院宫娥，运退反为妓女；风流妓女，时来配作夫人。</p><p>青春美女，却招愚蠢之夫；俊秀郎君，反配粗丑之妇。</p><p>蛟龙未遇，潜水于鱼鳖之间；君子失时，拱手于小人之下。</p><p>天不得时，日月无光；地不得时，草木不生；</p><p>水不得时，波浪不静；人不得时，限运不通。</p><p>人生在世，富贵不能淫，贫贱不能移。有先贫而后富，有老壮而少衰。</p><p>衣服虽破，常有礼仪之容；面带忧愁，每抱怀安之量。</p><p>时遭不遇，只宜安贫守份；心若不欺，必有扬眉之日。</p><p>初贫君子，天然骨格生成；乍富小人，不脱贫寒肌体。</p><p>福禄岂能强求，富贵谁人不欲。</p>]]></content>
      
      
      <categories>
          
          <category> 摘抄 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文言文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《现代操作系统》书籍记录笔记</title>
      <link href="/2021/11/15/xian-dai-cao-zuo-xi-tong-shu-ji-ji-lu-bi-ji/"/>
      <url>/2021/11/15/xian-dai-cao-zuo-xi-tong-shu-ji-ji-lu-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章引论"><a href="#第一章引论" class="headerlink" title="第一章引论"></a>第一章引论</h2><ul><li>计算机的两种运行模式<br>计算机的两种运行模式：内核态和用户态<br>内核态中操作系统具有对所有硬件的完全访问权，可以执行机器能够运行的任何指令<br>用户态中禁止执行会影响机器控制或者可进行I/O操作的指令，仅允许执行整个指令集的一个子集和访问所有功能的一个子集</li></ul><ul><li><p>什么是操作系统<br>操作系统是一种运行在内核态的软件</p></li><li><p>计算机硬件简介<br>处理器（cpu）、存储器、磁盘、I/O设备、总线</p></li></ul><p><strong>todo</strong><br>处理器<br>存储器<br>磁盘<br>IO设备<br>总线</p><ul><li><p>上下文切换<br>在多道程序系统中，从一个程序切换到另一个程序，有时称为上下文切换</p></li><li><p>进程<br>进程本质上是正在执行的一个程序</p></li><li><p>进程表<br>与一个进程有关的所有信息，除进程自身地址空间的内容以外，均存放在进程表中，进程表是数组或者链表结构，每个进程都要占用一项</p></li><li><p>地址空间<br>每个进程可以使用的地址集合。在不使用虚拟内存时，一个进程可拥有的最大地址空间小于主存</p></li><li><p>虚拟内存<br>todo</p></li><li><p>一个挂起的进程包括：进程的地址空间和对应的进程表项（其中包括寄存器以及稍后重启动该进程所需要的许多其他信息）</p></li><li><p>进程间通信<br>合作完成某些作业的相关进程经常需要彼此通信以便同步他们的行为，这种进程称为进程间通信</p></li><li><p>文件</p></li></ul><p><strong>todo</strong></p><ul><li>管道<br>管道是一种虚文件，它可以连接两个进程，进程A和进程B通过管道传递数据进行通信</li><li>操作系统具有的两种功能<br>为用户程序提供抽象和管理计算机资源</li><li>操作系统的两种观点：资源管理观点和扩展的机器观点<br>资源管理观点认为操作系统的任务是有效的管理系统的各个部分<br>扩展的机器观点认为操作系统的任务是为用户提供比实际机器更于运用的抽象。这些抽象包括进程、地址空间以及文件</li><li>操作系统历史<br>早期批处理系统、多道程序系统、个人计算机</li></ul><h2 id="第三章内存管理"><a href="#第三章内存管理" class="headerlink" title="第三章内存管理"></a>第三章内存管理</h2><h3 id="存储管理器"><a href="#存储管理器" class="headerlink" title="存储管理器"></a>存储管理器</h3><p>操作系统中管理分层存储器体系的部分。它的任务是有效地管理内存，即记录哪些内存是正在使用的哪些内存是空闲的；在进程需要时为其分配内存，在进程使用完后释放内存。</p><h3 id="地址空间"><a href="#地址空间" class="headerlink" title="地址空间"></a>地址空间</h3><p>地址空间是一个进程可用于寻址内存的一套地址集合。每个进程都有一个自己的地址空间，并且这个地址空间独立于其他进程的地址空间（除了需要共享地址空间外）</p><h3 id="基址寄存器和界限寄存器"><a href="#基址寄存器和界限寄存器" class="headerlink" title="基址寄存器和界限寄存器"></a>基址寄存器和界限寄存器</h3><ul><li>基址寄存器和界限寄存器是两个特殊的硬件寄存器，用来给每个进程提供私有的地址空间，每个内存地址在送到内存之前，都会自动先加上基址寄存器的内容。</li><li>进程运行时，程序的起始物理地址装载到基址寄存器中，程序的长度装载到界限寄存器中。</li><li>当使用这两个寄存器时，程序装载到内存中连续空闲位置且装载期间无需重定位。</li></ul><p>缺点：每次访问内存都需要进行加法和比较运算。加法运算由于进位传递时间的问题，时间会很慢。</p><h3 id="处理内存超载的通用方法：交换技术、虚拟内存"><a href="#处理内存超载的通用方法：交换技术、虚拟内存" class="headerlink" title="处理内存超载的通用方法：交换技术、虚拟内存"></a>处理内存超载的通用方法：交换技术、虚拟内存</h3><p>交换技术即把一个进程完整调入内存，使该进程运行一段时间，然后把他存回磁盘。空闲进程主要存储在磁盘上。<br>虚拟内存：该策略能使程序在只有一部分被调入内存的情况下运行。<br><strong>内存紧缩</strong>：把内存中小的空闲区合并成一大块</p><h4 id="虚拟内存的基本思想"><a href="#虚拟内存的基本思想" class="headerlink" title="虚拟内存的基本思想"></a>虚拟内存的基本思想</h4><p>每个程序都有自己的地址空间，这个空间被分割成多个块，每一块称作<strong>一页</strong>或<strong>页面</strong>。每一页有连续的地址范围。这些页被映射到物理内存，但并不是所有的页都必须在内存中才能运行程序。当程序引用到一部分在物理内存中的地址空间时，由硬件立刻执行必要的映射。当程序引用到一部分不在物理内存中的地址空间时，由操作系统负责将缺失的部分装入物理内存并重新执行失败的指令。</p><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><p>虚拟内存系统都使用一种称为分页的技术。</p><p>由程序产生的这些地址称为<strong>虚拟地址</strong>，他们构成了一个<strong>虚拟地址空间</strong>。</p><p>（硬件）<strong>内存管理单元（MMU）</strong>把虚拟地址映射为物理地址</p><p>虚拟地址空间按照固定大小划分成被称为<strong>页面</strong>的若干单元，在物理内存中对应的单元称为<strong>页框</strong>。（两者大小一样）</p><p><strong>页表</strong>给出虚拟地址和物理内存地址之间的映射关系。</p><h4 id="当程序访问了一个没有被映射的页面会发生什么情况？"><a href="#当程序访问了一个没有被映射的页面会发生什么情况？" class="headerlink" title="当程序访问了一个没有被映射的页面会发生什么情况？"></a>当程序访问了一个没有被映射的页面会发生什么情况？</h4><p>当程序引用到一个没有被映射到物理内存中的页面时，CPU陷入到操作系统，这个陷阱称为<strong>缺页中断（缺页错误）</strong> 。操作系统找到一个很少使用的页框，把它的内容写入磁盘，把需要访问的页面读到刚才回收的页框中，修改映射关系，重新启动引起陷阱的指令。</p><h3 id="页表"><a href="#页表" class="headerlink" title="页表"></a>页表</h3><p>虚拟地址被分成<strong>虚拟页号</strong>（高位）和<strong>偏移量</strong>（低位）两个部分。</p><blockquote><p>页号作为页表的索引，可以得出对应于该虚拟页面的页框号</p></blockquote><p>页表可以将虚拟页面映射为页框。</p><p>页表的结构</p><img src="../images/%E3%80%8A%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B%E4%B9%A6%E7%B1%8D%E8%AE%B0%E5%BD%95%E7%AC%94%E8%AE%B0/image-20211119165640956.png" alt="image-20211119165640956" style="zoom: 80%;"><h3 id="加速分页过程"><a href="#加速分页过程" class="headerlink" title="加速分页过程"></a>加速分页过程</h3><p>因为大多数程序总是对少量的页面进行多次的访问，因此只有少量的页表项会被反复读取，其他的页表项很少被访问。</p><p>因此为了加速分页机制，为计算机设计了一个硬件设备，<strong>转换检测缓冲区（TLB）</strong>或者叫<strong>相联存储器</strong>或<strong>快表</strong> </p><p><strong>TLB的工作过程</strong>：</p><p>当虚拟地址放入MMU（内存管理单元）中进行地址转换时，硬件首先通过将该虚拟页号与TLB所有表项进行匹配，判断虚拟页面是否在其中，如果发现了一个有效的匹配并且不违反保护位，则可以对其进行操作。如果是取出操作，将页框号直接从TLB中取出，不必访问页表。</p><p>如果虚拟页号不在TLB中，进行正常的页表查询，TLB淘汰一个表项，然后用新找到的表项代替它。当TLB淘汰表项时，会将访问位的变化复制到内存中。</p><h3 id="空闲内存管理"><a href="#空闲内存管理" class="headerlink" title="空闲内存管理"></a>空闲内存管理</h3><p>使用位图的存储管理、使用链表的存储管理</p><p>使用链表的存储管理：</p><p>维护一个记录已经分配内存段和空闲内存段的链表。其中链表中的一个结点或者包含一个进程，或者是两个进程间的一块空闲区。</p><p><strong>首次适配算法、最佳适配算法</strong><br>首次适配算法：存储管理器沿着段链表进行搜索，直到找到一个足够大的空闲区，除非空闲区大小正好和要分配的空间大小一样，否则，将该空闲区分为两部分，一部分供进程使用，另一部分形成新的空闲区。</p><p>最佳适配算法：搜索整个链表，找出能够容纳进程的最小空间。</p><p>最差适配算法：总是分配最大的可用空闲区，使得新的空闲区比较大而可以继续使用</p><p>快速适配算法：为常用大小的空闲区维护单独的链表，4KB、8KB、12KB,…..</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 《现代操作系统》 </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>铁路与公路(Floyd)</title>
      <link href="/2021/11/14/2021-11-14-tie-lu-yu-gong-lu-floyd/"/>
      <url>/2021/11/14/2021-11-14-tie-lu-yu-gong-lu-floyd/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.acwing.com/problem/content/4077/">4074. 铁路与公路</a></p><p>某国家有 n 个城市（编号 1∼n）和 m 条双向铁路。</p><p>每条铁路连接两个不同的城市，没有两条铁路连接同一对城市。</p><p>除了铁路以外，该国家还有公路。</p><p>对于每对不同的城市 x,y，当且仅当它们之间没有铁路时，它们之间会存在一条双向公路。</p><p>经过每条铁路或公路都需要花费 1 小时的时间。</p><p>现在有一列火车和一辆汽车同时离开城市 1，它们的目的地都是城市 n。</p><p>它们不会在途中停靠（但是可以在城市 n 停靠）。</p><p>火车只能沿铁路行驶，汽车只能沿公路行驶。</p><p>请你为它们规划行进路线，每条路线中可重复经过同一条铁路或公路，但是为了避免发生事故，火车和汽车不得同时到达同一个城市（城市 n 除外）。</p><p>请问，在这些条件的约束下，两辆车全部到达城市 n 所需的最少小时数，即求更慢到达城市 n 的那辆车所需的时间的最小值。</p><p>注意，两辆车允许但不必要同时到达城市 n。</p><p>输入格式<br>第一行包含整数 n 和 m。</p><p>接下来 m 行，每行包含两个整数 u,v，表示城市 u 和城市 v 之间存在一条铁路。</p><p>输出格式<br>一个整数，表示所需的最少小时数。</p><p>如果至少有一辆车无法到达城市 n，则输出 −1。</p><p>数据范围<br>前 6 个测试点满足 2≤n≤10，0≤m≤10。<br>所有测试点满足 2≤n≤400，0≤m≤n(n−1)/2，1≤u,v≤n。</p><p>输入样例1：<br>4 2<br>1 3<br>3 4<br>输出样例1：<br>2<br>输入样例2：<br>4 6<br>1 2<br>1 3<br>1 4<br>2 3<br>2 4<br>3 4<br>输出样例2：<br>-1<br>输入样例3：<br>5 5<br>4 2<br>3 5<br>4 5<br>5 1<br>1 2<br>输出样例3：<br>3</p><p>题解分析：直接求两种方式从1 到达 n 的最大时间就是答案</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> INF 0x3f3f3f3f</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span><span class="token keyword">int</span> g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>t<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">floyd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">memset</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> u<span class="token punctuation">,</span>v<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>j <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span>                g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">floyd</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">floyd</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ans <span class="token operator">==</span> INF<span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模板题 </tag>
            
            <tag> Floyd </tag>
            
            <tag> 单源最短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小朋友排队(树状数组)</title>
      <link href="/2021/11/14/2021-11-14-xiao-peng-you-pai-dui/"/>
      <url>/2021/11/14/2021-11-14-xiao-peng-you-pai-dui/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.acwing.com/problem/content/description/1217/">小朋友排队(树状数组）</a></p><p>n 个小朋友站成一排。</p><p>现在要把他们按身高从低到高的顺序排列，但是每次只能交换位置相邻的两个小朋友。</p><p>每个小朋友都有一个不高兴的程度。</p><p>开始的时候，所有小朋友的不高兴程度都是 0。</p><p>如果某个小朋友第一次被要求交换，则他的不高兴程度增加 1，如果第二次要求他交换，则他的不高兴程度增加 2（即不高兴程度为 3），依次类推。当要求某个小朋友第 k 次交换时，他的不高兴程度增加 k。</p><p>请问，要让所有小朋友按从低到高排队，他们的不高兴程度之和最小是多少。</p><p>如果有两个小朋友身高一样，则他们谁站在谁前面是没有关系的。</p><p>输入格式<br>输入的第一行包含一个整数 n，表示小朋友的个数。</p><p>第二行包含 n 个整数 H1,H2,…,Hn，分别表示每个小朋友的身高。</p><p>输出格式<br>输出一行，包含一个整数，表示小朋友的不高兴程度和的最小值。</p><p>数据范围<br>1≤n≤100000,<br>0≤Hi≤1000000<br>输入样例：<br>3<br>3 2 1<br>输出样例：<br>9<br>样例解释<br>首先交换身高为3和2的小朋友，再交换身高为3和1的小朋友，再交换身高为2和1的小朋友，每个小朋友的不高兴程度都是3，总和为9。</p><p><strong>题解分析</strong>：<br>此题需要求他们的不高兴程度之和最小是多少，每个小朋友的第k次交换，不高兴的程度都会增加 k ，因此，每个小朋友如果交换 k 次到达正确位置，总的不高兴程度为1+2+3+…+k = （1+k) *k /2<br>那么此题应该让每个小朋友的交换次数达到最小，然后总的不高兴程度就是答案。</p><p>首先我们要先知道逆序对的概念：如果前一个数比后一个数大（可以不相邻）的话两个数可以构成一个逆序对。一个序列如果逆序对数量为0，则这个序列呈非降序排列，是有序的，符合题意的从低到高排序。<br>因此每次交换我们应该进行有意义的交换，意思是每次交换必须使得逆序对数量减少1，如果进行了无意义的交换，那么每个小朋友的交换次数就不是最小，达不到最优，最终的结果应该是逆序对数量消为 0 </p><p>设某个小朋友下标为 t<br>序列总的逆序对数量 = 每个小朋友逆序对数量总和<br>每个小朋友理论上的最小交换次数 = 与这个小朋友构成的逆序对数量 = 序列[1,t-1]中比他高的小朋友个数 + 序列 [ t+1, n] 中比这个小朋友低的小朋友个数。</p><p><strong>证明</strong>：<br>我们求出每个小朋友的最小交换次数，求不高兴程度加起来就是最小的，是答案。<br>每个小朋友都取最小交换次数是可以取得的，因为冒泡排序就是采用了这样的思想使得每次循环都让一个数的逆序对降为 0 。结论得证。</p><p><strong>解法</strong>：<br>使用树状数组存储每个数出现的次数，边遍历边维护树状数组，看代码理解吧<br>也可使用贪心 和 归并排序做。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1000005</span><span class="token punctuation">;</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>tree<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>sum<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//tree[i]树状数组存储每个数出现的次数</span><span class="token keyword">int</span> <span class="token function">lowbit</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> x<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>x<span class="token punctuation">;</span> i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span> i<span class="token operator">+</span><span class="token operator">=</span><span class="token function">lowbit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> v<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>x<span class="token punctuation">;</span> i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">-</span><span class="token operator">=</span><span class="token function">lowbit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ans <span class="token operator">+</span><span class="token operator">=</span> tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//求每个学生前面比他高的人数</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span>N<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">query</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">memset</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> tree<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//求每个学生后面比他低的人数</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    LL ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树状数组 </tag>
            
            <tag> 逆序对 </tag>
            
            <tag> 模板题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树</title>
      <link href="/2021/11/12/2021-11-12-xian-duan-shu/"/>
      <url>/2021/11/12/2021-11-12-xian-duan-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="线段树模板"><a href="#线段树模板" class="headerlink" title="线段树模板"></a>线段树模板</h2><p><a href="https://www.acwing.com/video/664/">https://www.acwing.com/video/664/</a></p><p><img src="/../images/2021-11-12-%E7%BA%BF%E6%AE%B5%E6%A0%91/image-20211114230014898.png" alt="image-20211114230014898"></p><p><img src="/../images/2021-11-12-%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/image-20211112203859684.png" alt="image-20211112203859684"></p><h3 id="数据存储："><a href="#数据存储：" class="headerlink" title="数据存储："></a>数据存储：</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录一下权重</span><span class="token keyword">struct</span> node<span class="token punctuation">{</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//左右区间</span>    <span class="token keyword">int</span> sum<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//总和</span><span class="token punctuation">}</span>tr<span class="token punctuation">[</span>N<span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记得开 4 倍空间</span></code></pre><h3 id="void-push-up-int-u"><a href="#void-push-up-int-u" class="headerlink" title="void push_up(int u)"></a>void push_up(int u)</h3><p>用子节点信息更新当前节点信息</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">push_up</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//利用它的两个儿子来算一下它的当前节点信息</span><span class="token punctuation">{</span>    tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">=</span>tr<span class="token punctuation">[</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">+</span>tr<span class="token punctuation">[</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//左儿子 u&lt;&lt;1 ,右儿子 u&lt;&lt;1|1  </span><span class="token punctuation">}</span></code></pre><h3 id="void-build-int-u-int-l-int-r"><a href="#void-build-int-u-int-l-int-r" class="headerlink" title="void build(int u,int l,int r)"></a>void build(int u,int l,int r)</h3><p>根结点为u，在一段区间[l,r]上初始化线段树</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*第一个参数，当前节点编号，第二个参数，左边界，第三个参数，右边界*/</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>w<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果当前已经是叶节点了，那我们就直接赋值就可以了</span>    <span class="token keyword">else</span><span class="token comment" spellcheck="true">//否则的话，说明当前区间长度至少是 2 对吧，那么我们需要把当前区间分为左右两个区间，那先要找边界点</span>    <span class="token punctuation">{</span>        tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>l<span class="token punctuation">,</span>r<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里记得赋值一下左右边界的初值</span>        <span class="token keyword">int</span> mid<span class="token operator">=</span>l<span class="token operator">+</span>r<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//边界的话直接去计算一下 l + r 的下取整</span>        <span class="token function">build</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//先递归一下左儿子</span>        <span class="token function">build</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//然后递归一下右儿子</span>        <span class="token function">push_up</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//做完两个儿子之后的话呢 push_up 一遍u 啊，更新一下当前节点信息</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="int-query-int-u-int-l-int-r"><a href="#int-query-int-u-int-l-int-r" class="headerlink" title="int query(int u,int l,int r)"></a>int query(int u,int l,int r)</h3><p>查询从根节点u开始往下找对应的[l,r]区间的和</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//查询的过程是从根结点开始往下找对应的一个区间</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&amp;&amp;</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span><span class="token keyword">return</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果当前区间已经完全被包含了，那么我们直接返回它的值就可以了</span>    <span class="token comment" spellcheck="true">//否则的话我们需要去递归来算</span>    <span class="token keyword">int</span> mid<span class="token operator">=</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">+</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算一下我们 当前 区间的中点是多少</span>    <span class="token comment" spellcheck="true">//先判断一下和左边有没有交集</span>    <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用 sum 来表示一下我们的总和</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">>=</span>l<span class="token punctuation">)</span>sum<span class="token operator">+</span><span class="token operator">=</span><span class="token function">query</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//看一下我们当前区间的中点和左边有没有交集</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">>=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//看一下我们当前区间的中点和右边有没有交集</span>    sum<span class="token operator">+</span><span class="token operator">=</span><span class="token function">query</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="void-modify-int-u-int-x-int-v"><a href="#void-modify-int-u-int-x-int-v" class="headerlink" title="void modify(int u,int x,int v)"></a>void modify(int u,int x,int v)</h3><p>根节点为u，修改位置为x，修改值 += v</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">modify</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//第一个参数也就是当前节点的编号,第二个参数是要修改的位置，第三个参数是要修改的值</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">==</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">+</span><span class="token operator">=</span>v<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//如果当前已经是叶节点了，那我们就直接让他的总和加上 v 就可以了</span>    <span class="token comment" spellcheck="true">//否则</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>      <span class="token keyword">int</span> mid<span class="token operator">=</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">+</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//看一下 x 是在左半边还是在右半边</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span><span class="token function">modify</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果是在左半边，那就找左儿子</span>      <span class="token keyword">else</span> <span class="token function">modify</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果在右半边，那就找右儿子</span>      <span class="token comment" spellcheck="true">//更新完之后当前节点的信息就要发生变化对吧，那么我们就需要 pushup 一遍</span>      <span class="token function">push_up</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="主函数区间查询和点单修改操作"><a href="#主函数区间查询和点单修改操作" class="headerlink" title="主函数区间查询和点单修改操作"></a>主函数区间查询和点单修改操作</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*第一个参数是根节点的下标，根节点是一号点，然后初始区间是 1 到 n */</span>    <span class="token comment" spellcheck="true">//后面的话就是一些修改操作了</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> k<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求和的时候，也是传三个参数，第一个的话是根节点的编号 ，第二个的话是我们查询的区间 </span>        <span class="token comment" spellcheck="true">//第一个参数也就是当前节点的编号</span>        <span class="token keyword">else</span>        <span class="token function">modify</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第一个参数是根节点的下标,第二个参数是要修改的位置，第三个参数是要修改的值</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>线段树例题：<a href="https://www.acwing.com/problem/content/1266/">https://www.acwing.com/problem/content/1266/</a></p><h3 id="代码整合（方便复制）"><a href="#代码整合（方便复制）" class="headerlink" title="代码整合（方便复制）:"></a>代码整合（方便复制）:</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录一下权重</span><span class="token keyword">struct</span> node<span class="token punctuation">{</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//左右区间</span>    <span class="token keyword">int</span> sum<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//总和</span><span class="token punctuation">}</span>tr<span class="token punctuation">[</span>N<span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记得开 4 倍空间</span><span class="token keyword">void</span> <span class="token function">push_up</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//利用它的两个儿子来算一下它的当前节点信息</span><span class="token punctuation">{</span>    tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">=</span>tr<span class="token punctuation">[</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">+</span>tr<span class="token punctuation">[</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//左儿子 u&lt;&lt;1 ,右儿子 u&lt;&lt;1|1  </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*第一个参数，当前节点编号，第二个参数，左边界，第三个参数，右边界*/</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>w<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果当前已经是叶节点了，那我们就直接赋值就可以了</span>    <span class="token keyword">else</span><span class="token comment" spellcheck="true">//否则的话，说明当前区间长度至少是 2 对吧，那么我们需要把当前区间分为左右两个区间，那先要找边界点</span>    <span class="token punctuation">{</span>        tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>l<span class="token punctuation">,</span>r<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里记得赋值一下左右边界的初值</span>        <span class="token keyword">int</span> mid<span class="token operator">=</span>l<span class="token operator">+</span>r<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//边界的话直接去计算一下 l + r 的下取整</span>        <span class="token function">build</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//先递归一下左儿子</span>        <span class="token function">build</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//然后递归一下右儿子</span>        <span class="token function">push_up</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//做完两个儿子之后的话呢 push_up 一遍u 啊，更新一下当前节点信息</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//查询的过程是从根结点开始往下找对应的一个区间</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&amp;&amp;</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span><span class="token keyword">return</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果当前区间已经完全被包含了，那么我们直接返回它的值就可以了</span>    <span class="token comment" spellcheck="true">//否则的话我们需要去递归来算</span>    <span class="token keyword">int</span> mid<span class="token operator">=</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">+</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算一下我们 当前 区间的中点是多少</span>    <span class="token comment" spellcheck="true">//先判断一下和左边有没有交集</span>    <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用 sum 来表示一下我们的总和</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">>=</span>l<span class="token punctuation">)</span>sum<span class="token operator">+</span><span class="token operator">=</span><span class="token function">query</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//看一下我们当前区间的中点和左边有没有交集</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">>=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//看一下我们当前区间的中点和右边有没有交集</span>    sum<span class="token operator">+</span><span class="token operator">=</span><span class="token function">query</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">modify</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//第一个参数也就是当前节点的编号,第二个参数是要修改的位置，第三个参数是要修改的值</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">==</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">+</span><span class="token operator">=</span>v<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//如果当前已经是叶节点了，那我们就直接让他的总和加上 v 就可以了</span>    <span class="token comment" spellcheck="true">//否则</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>      <span class="token keyword">int</span> mid<span class="token operator">=</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">+</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//看一下 x 是在左半边还是在右半边</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span><span class="token function">modify</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果是在左半边，那就找左儿子</span>      <span class="token keyword">else</span> <span class="token function">modify</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果在右半边，那就找右儿子</span>      <span class="token comment" spellcheck="true">//更新完之后当前节点的信息就要发生变化对吧，那么我们就需要 pushup 一遍</span>      <span class="token function">push_up</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*第一个参数是根节点的下标，根节点是一号点，然后初始区间是 1 到 n */</span>    <span class="token comment" spellcheck="true">//后面的话就是一些修改操作了</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> k<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求和的时候，也是传三个参数，第一个的话是根节点的编号 ，第二个的话是我们查询的区间 </span>        <span class="token comment" spellcheck="true">//第一个参数也就是当前节点的编号</span>        <span class="token keyword">else</span>        <span class="token function">modify</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第一个参数是根节点的下标,第二个参数是要修改的位置，第三个参数是要修改的值</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>作者：wyl13479387613链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>acwing<span class="token punctuation">.</span>com<span class="token operator">/</span>solution<span class="token operator">/</span>content<span class="token operator">/</span><span class="token number">40394</span><span class="token operator">/</span>来源：AcWing著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 算法模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo中完美插入本地图片</title>
      <link href="/2021/11/12/hexo-zhong-wan-mei-cha-ru-ben-di-tu-pian/"/>
      <url>/2021/11/12/hexo-zhong-wan-mei-cha-ru-ben-di-tu-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo中完美插入本地图片"><a href="#hexo中完美插入本地图片" class="headerlink" title="hexo中完美插入本地图片"></a>hexo中完美插入本地图片</h2><p>两种方法解决解决hexo插入本地图片</p><p>先hexo new “文章名”，把图片放入<code>_posts/文章名</code> 文件夹中</p><ol><li>第一种，使用官方引用图片方式</li></ol><pre><code>{% asset_img example.jpg [title] %}</code></pre><ol start="2"><li>第二种使用插件</li></ol><p><a href="https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked </a> 解决hexo插入本地图片</p><p>_config.yml文件</p><pre><code>post_asset_folder: truemarked:    prependRoot: true    postAsset: true</code></pre><p>使用语法：</p><pre><code>![](image.jpg)</code></pre><p>这样可以引入，但是无法在markdown编辑器中显示图片</p><p>采用这种下面这种引入方式可解决：</p><ul><li><p>在“Blog-&gt;source”下新建”images”文件夹。注意”images”与”_posts”同级。</p></li><li><p>在Typora中“文件-&gt;设置偏好-&gt;图像“。在插入图片时”复制到指定路径“设置为</p></li></ul><pre class=" language-text"><code class="language-text">../../source/images//${filename}</code></pre><p>每次将图片插入到images下的文章名的文件夹下</p><p>引入图片，问题可完美解决</p><ol start="3"><li>使用图床引入外链</li></ol><p>图床网站 <a href="https://sm.ms/">https://sm.ms/</a></p><p>感觉这个最简单    </p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><ul><li><p>两种方法只有第二种引入图片在markdown编辑器中可见</p></li><li><p>参考互联网上文章使用hexo-asset-image插件，高版本hexo并不适配</p></li></ul><h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><p>知乎：<a href="https://www.zhihu.com/question/419663130">https://www.zhihu.com/question/419663130</a></p><p>博客：<a href="http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/">http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/</a></p><p>官方文档<a href="https://hexo.io/zh-cn/docs/asset-folders.html">https://hexo.io/zh-cn/docs/asset-folders.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo-renderer-marked </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树状数组</title>
      <link href="/2021/11/12/shu-zhuang-shu-zu-mo-ban/"/>
      <url>/2021/11/12/shu-zhuang-shu-zu-mo-ban/</url>
      
        <content type="html"><![CDATA[<h2 id="树状数组原理"><a href="#树状数组原理" class="headerlink" title="树状数组原理"></a>树状数组原理</h2><p><img src="/../images/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E6%A8%A1%E6%9D%BF/7416_68861e9035-31e23bc7b41ec145edb45cee8b55855-1636690330918.png" alt="31e23bc7b41ec145edb45cee8b55855.png"></p><p>1、lowbit(x):返回x的最后一位1</p><p>2、add(x,v):在x位置加上v，并将后面相关联的位置也加上v</p><p>3、query(x):询问x的前缀和</p><p>时间复杂度 $O(logn)$</p><h2 id="树状数组模板"><a href="#树状数组模板" class="headerlink" title="树状数组模板"></a>树状数组模板</h2><pre class=" language-c++"><code class="language-c++">const int N = 100005;int a[N],tree[N];int n,m;int lowbit(int x){    return x & (-x);}void update(int pos,int v){    for(int i=pos; i<N; i+=lowbit(i))    {        tree[i] += v;    }}int query(int n){    int ans = 0;    for(int pos=n; pos>0; pos-=lowbit(pos)) ans += tree[pos];    return ans;}int query(int a,int b){    return query(b) - query(a-1);}</code></pre><p>例题：<a href="https://www.acwing.com/problem/content/1266/">1264. 动态求连续区间和</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法模板 </tag>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建及美化</title>
      <link href="/2021/11/12/2021-11-12-bo-ke-da-jian-ji-mei-hua/"/>
      <url>/2021/11/12/2021-11-12-bo-ke-da-jian-ji-mei-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="搭建框架"><a href="#搭建框架" class="headerlink" title="搭建框架"></a>搭建框架</h2><p>博客主要采用github + hexo + hexo-theme-matery进行搭建</p><p>此博客使用github pages进行托管，利用hexo搭建博客框架，使用hexo-theme-matery作为博客的主题。</p><p>hexo搭建博客可以下载多种主题，使用配置的方式让代码小白也能拥有自己的一个博客</p><p>hexo-theme-matery页面美观，成体系的架构博客，使得用户专注于博客内容得编写而省去开发得繁琐</p><h3 id="github项目地址"><a href="#github项目地址" class="headerlink" title="github项目地址"></a>github项目地址</h3><p><a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a>  </p><h2 id="博客主题美化"><a href="#博客主题美化" class="headerlink" title="博客主题美化"></a>博客主题美化</h2><ul><li>鼠标点击显示文字特效</li></ul><p><img src="/../images/2021-11-12-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/mouseclick.gif" alt="mouseclick"></p><p>参考文章：<a href="https://blog.csdn.net/victoryxa/article/details/105841309">https://blog.csdn.net/victoryxa/article/details/105841309</a></p><ul><li>代码高亮</li></ul><p>参考github <a href="https://github.com/ele828/hexo-prism-plugin">https://github.com/ele828/hexo-prism-plugin</a></p><h2 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h2><ul><li>给自己的博客加上看板娘——Live2d蕾姆 | 雷姆</li></ul><p>参考文章： <a href="https://zhuanlan.zhihu.com/p/35351118">https://zhuanlan.zhihu.com/p/35351118</a></p><ul><li>评价和邮件通知、音乐播放器</li></ul><p>参考：<a href="https://www.cnblogs.com/mfrank/p/12830097.html">https://www.cnblogs.com/mfrank/p/12830097.html</a></p><ul><li>主题魔改</li></ul><p>参考：<a href="https://juejin.cn/post/6844904132608786446">https://juejin.cn/post/6844904132608786446</a></p><ul><li>代码高亮不显示问题</li></ul><p><a href="https://prismjs.com/#languages-list">https://prismjs.com/#languages-list</a></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// Just a lil’ script to show off that inline JS gets highlighted</span>    window<span class="token punctuation">.</span>console <span class="token operator">&amp;&amp;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>assets/favicon.png<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Prism<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>assets/style.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>themes/prism.css<span class="token punctuation">"</span></span> <span class="token attr-name">data-noprefix</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>assets/vendor/prefixfree.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> _gaq <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'_setAccount'</span><span class="token punctuation">,</span> <span class="token string">'UA-33746269-1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'_trackPageview'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://www.google-analytics.com/ga.js<span class="token punctuation">"</span></span> <span class="token attr-name">async</span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/11/10/hellohexo/"/>
      <url>/2021/11/10/hellohexo/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
